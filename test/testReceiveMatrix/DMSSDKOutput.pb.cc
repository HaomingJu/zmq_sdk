// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DMSSDKOutput.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DMSSDKOutput.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace DMSOutputProtocol {

namespace {

const ::google::protobuf::Descriptor *Rect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection
    *Rect_reflection_ = NULL;
const ::google::protobuf::Descriptor *Vector_3f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection
    *Vector_3f_reflection_ = NULL;
const ::google::protobuf::Descriptor *Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection
    *Point_reflection_ = NULL;
const ::google::protobuf::Descriptor *StateTrigger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection
    *StateTrigger_reflection_ = NULL;
const ::google::protobuf::Descriptor *EyeScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection
    *EyeScore_reflection_ = NULL;
const ::google::protobuf::Descriptor *SmokeScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection
    *SmokeScore_reflection_ = NULL;
const ::google::protobuf::Descriptor *RotRPY_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection
    *RotRPY_reflection_ = NULL;
const ::google::protobuf::Descriptor *RotVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection
    *RotVector_reflection_ = NULL;
const ::google::protobuf::Descriptor *FaceDirection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection
    *FaceDirection_reflection_ = NULL;
const ::google::protobuf::Descriptor *EventResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection
    *EventResult_reflection_ = NULL;
const ::google::protobuf::Descriptor *DAAResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection
    *DAAResult_reflection_ = NULL;
const ::google::protobuf::Descriptor *StateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection
    *StateResult_reflection_ = NULL;
const ::google::protobuf::Descriptor *LDMK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection
    *LDMK_reflection_ = NULL;
const ::google::protobuf::Descriptor *EyeResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection
    *EyeResult_reflection_ = NULL;
const ::google::protobuf::Descriptor *SmokeResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection
    *SmokeResult_reflection_ = NULL;
const ::google::protobuf::Descriptor *FaceROI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection
    *FaceROI_reflection_ = NULL;
const ::google::protobuf::Descriptor *FaceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection
    *FaceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor *PersonInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection
    *PersonInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor *VisionPercept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection
    *VisionPercept_reflection_ = NULL;
const ::google::protobuf::Descriptor *PerceptResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection
    *PerceptResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor *ImageCheckEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor *EyeState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor *SmokeState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor *StateEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor *EventEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor *FaceDirEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor *PersonType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor *CameraType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_DMSSDKOutput_2eproto() {
  protobuf_AddDesc_DMSSDKOutput_2eproto();
  const ::google::protobuf::FileDescriptor *file =
      ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
          "DMSSDKOutput.proto");
  GOOGLE_CHECK(file != NULL);
  Rect_descriptor_ = file->message_type(0);
  static const int Rect_offsets_[4] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, left_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, right_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, top_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, bottom_),
  };
  Rect_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          Rect_descriptor_, Rect::default_instance_, Rect_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(Rect));
  Vector_3f_descriptor_ = file->message_type(1);
  static const int Vector_3f_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector_3f, x_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector_3f, y_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector_3f, z_),
  };
  Vector_3f_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          Vector_3f_descriptor_, Vector_3f::default_instance_,
          Vector_3f_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                  Vector_3f, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector_3f,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(Vector_3f));
  Point_descriptor_ = file->message_type(2);
  static const int Point_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  };
  Point_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          Point_descriptor_, Point::default_instance_, Point_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(Point));
  StateTrigger_descriptor_ = file->message_type(3);
  static const int StateTrigger_offsets_[12] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateTrigger, ddw_l_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateTrigger, ddw_r_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateTrigger, ddw_u_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateTrigger, ddw_d_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateTrigger, ddw_lu_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateTrigger, ddw_ld_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateTrigger, ddw_ru_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateTrigger, ddw_rd_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateTrigger, dfw_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateTrigger, dya_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateTrigger, dca_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateTrigger, dsa_),
  };
  StateTrigger_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          StateTrigger_descriptor_, StateTrigger::default_instance_,
          StateTrigger_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                     StateTrigger, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateTrigger,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(StateTrigger));
  EyeScore_descriptor_ = file->message_type(4);
  static const int EyeScore_offsets_[6] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EyeScore,
                                                     left_open_score_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EyeScore,
                                                     left_close_score_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EyeScore,
                                                     left_unknow_score_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EyeScore,
                                                     right_open_score_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EyeScore,
                                                     right_close_score_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EyeScore,
                                                     right_unknow_score_),
  };
  EyeScore_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          EyeScore_descriptor_, EyeScore::default_instance_, EyeScore_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EyeScore,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EyeScore,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(EyeScore));
  SmokeScore_descriptor_ = file->message_type(5);
  static const int SmokeScore_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmokeScore,
                                                     no_smoke_normal_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmokeScore, smoke_normal_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmokeScore,
                                                     no_smoke_suspect_),
  };
  SmokeScore_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SmokeScore_descriptor_, SmokeScore::default_instance_,
          SmokeScore_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                   SmokeScore, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmokeScore,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SmokeScore));
  RotRPY_descriptor_ = file->message_type(6);
  static const int RotRPY_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotRPY, roll_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotRPY, pitch_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotRPY, yaw_),
  };
  RotRPY_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          RotRPY_descriptor_, RotRPY::default_instance_, RotRPY_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotRPY, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotRPY,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(RotRPY));
  RotVector_descriptor_ = file->message_type(7);
  static const int RotVector_offsets_[1] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotVector, unit_vector_),
  };
  RotVector_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          RotVector_descriptor_, RotVector::default_instance_,
          RotVector_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                  RotVector, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotVector,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(RotVector));
  FaceDirection_descriptor_ = file->message_type(8);
  static const int FaceDirection_offsets_[5] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceDirection, face_dir_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceDirection,
                                                     cur_angle_rpy_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceDirection,
                                                     avr_angle_rpy_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceDirection,
                                                     cur_angle_unit_vector_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceDirection,
                                                     avr_angle_unit_vector_),
  };
  FaceDirection_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          FaceDirection_descriptor_, FaceDirection::default_instance_,
          FaceDirection_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceDirection,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceDirection,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(FaceDirection));
  EventResult_descriptor_ = file->message_type(9);
  static const int EventResult_offsets_[1] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventResult, event_),
  };
  EventResult_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          EventResult_descriptor_, EventResult::default_instance_,
          EventResult_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                    EventResult, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventResult,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(EventResult));
  DAAResult_descriptor_ = file->message_type(10);
  static const int DAAResult_offsets_[1] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DAAResult, daa_event_),
  };
  DAAResult_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          DAAResult_descriptor_, DAAResult::default_instance_,
          DAAResult_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                  DAAResult, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DAAResult,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(DAAResult));
  StateResult_descriptor_ = file->message_type(11);
  static const int StateResult_offsets_[1] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateResult, state_),
  };
  StateResult_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          StateResult_descriptor_, StateResult::default_instance_,
          StateResult_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                    StateResult, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateResult,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(StateResult));
  LDMK_descriptor_ = file->message_type(12);
  static const int LDMK_offsets_[1] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LDMK,
                                                     face_feature_points_),
  };
  LDMK_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          LDMK_descriptor_, LDMK::default_instance_, LDMK_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LDMK, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LDMK,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(LDMK));
  EyeResult_descriptor_ = file->message_type(13);
  static const int EyeResult_offsets_[5] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EyeResult, left_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EyeResult, right_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EyeResult, left_roi_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EyeResult, right_roi_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EyeResult, score_),
  };
  EyeResult_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          EyeResult_descriptor_, EyeResult::default_instance_,
          EyeResult_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                  EyeResult, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EyeResult,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(EyeResult));
  SmokeResult_descriptor_ = file->message_type(14);
  static const int SmokeResult_offsets_[3] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmokeResult, smoke_state_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmokeResult, smoke_roi_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmokeResult, score_),
  };
  SmokeResult_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          SmokeResult_descriptor_, SmokeResult::default_instance_,
          SmokeResult_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                    SmokeResult, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmokeResult,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(SmokeResult));
  FaceROI_descriptor_ = file->message_type(15);
  static const int FaceROI_offsets_[2] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceROI, face_roi_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceROI, conf_),
  };
  FaceROI_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          FaceROI_descriptor_, FaceROI::default_instance_, FaceROI_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceROI,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceROI,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(FaceROI));
  FaceInfo_descriptor_ = file->message_type(16);
  static const int FaceInfo_offsets_[5] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceInfo, type_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceInfo, face_roi_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceInfo, ldmk_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceInfo, tracking_id_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceInfo, face_direction_),
  };
  FaceInfo_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          FaceInfo_descriptor_, FaceInfo::default_instance_, FaceInfo_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceInfo,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaceInfo,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(FaceInfo));
  PersonInfo_descriptor_ = file->message_type(17);
  static const int PersonInfo_offsets_[6] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonInfo, face_info_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonInfo, face_feature_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonInfo, eye_result_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonInfo, smoke_result_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonInfo, event_result_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonInfo,
                                                     state_trigger_),
  };
  PersonInfo_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          PersonInfo_descriptor_, PersonInfo::default_instance_,
          PersonInfo_offsets_, GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
                                   PersonInfo, _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PersonInfo,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(PersonInfo));
  VisionPercept_descriptor_ = file->message_type(18);
  static const int VisionPercept_offsets_[5] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionPercept,
                                                     camera_type_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionPercept, frame_id_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionPercept,
                                                     time_stamp_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionPercept, person_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionPercept,
                                                     daa_result_),
  };
  VisionPercept_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          VisionPercept_descriptor_, VisionPercept::default_instance_,
          VisionPercept_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionPercept,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisionPercept,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(VisionPercept));
  PerceptResult_descriptor_ = file->message_type(19);
  static const int PerceptResult_offsets_[1] = {
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptResult, vision_),
  };
  PerceptResult_reflection_ =
      new ::google::protobuf::internal::GeneratedMessageReflection(
          PerceptResult_descriptor_, PerceptResult::default_instance_,
          PerceptResult_offsets_,
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptResult,
                                                         _has_bits_[0]),
          GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PerceptResult,
                                                         _unknown_fields_),
          -1, ::google::protobuf::DescriptorPool::generated_pool(),
          ::google::protobuf::MessageFactory::generated_factory(),
          sizeof(PerceptResult));
  ImageCheckEnum_descriptor_ = file->enum_type(0);
  EyeState_descriptor_ = file->enum_type(1);
  SmokeState_descriptor_ = file->enum_type(2);
  StateEnum_descriptor_ = file->enum_type(3);
  EventEnum_descriptor_ = file->enum_type(4);
  FaceDirEnum_descriptor_ = file->enum_type(5);
  PersonType_descriptor_ = file->enum_type(6);
  CameraType_descriptor_ = file->enum_type(7);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                                     &protobuf_AssignDesc_DMSSDKOutput_2eproto);
}

void protobuf_RegisterTypes(const ::std::string &) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Rect_descriptor_, &Rect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector_3f_descriptor_, &Vector_3f::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StateTrigger_descriptor_, &StateTrigger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EyeScore_descriptor_, &EyeScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SmokeScore_descriptor_, &SmokeScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RotRPY_descriptor_, &RotRPY::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RotVector_descriptor_, &RotVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FaceDirection_descriptor_, &FaceDirection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EventResult_descriptor_, &EventResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DAAResult_descriptor_, &DAAResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StateResult_descriptor_, &StateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LDMK_descriptor_, &LDMK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EyeResult_descriptor_, &EyeResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SmokeResult_descriptor_, &SmokeResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FaceROI_descriptor_, &FaceROI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FaceInfo_descriptor_, &FaceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PersonInfo_descriptor_, &PersonInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VisionPercept_descriptor_, &VisionPercept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PerceptResult_descriptor_, &PerceptResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DMSSDKOutput_2eproto() {
  delete Rect::default_instance_;
  delete Rect_reflection_;
  delete Vector_3f::default_instance_;
  delete Vector_3f_reflection_;
  delete Point::default_instance_;
  delete Point_reflection_;
  delete StateTrigger::default_instance_;
  delete StateTrigger_reflection_;
  delete EyeScore::default_instance_;
  delete EyeScore_reflection_;
  delete SmokeScore::default_instance_;
  delete SmokeScore_reflection_;
  delete RotRPY::default_instance_;
  delete RotRPY_reflection_;
  delete RotVector::default_instance_;
  delete RotVector_reflection_;
  delete FaceDirection::default_instance_;
  delete FaceDirection_reflection_;
  delete EventResult::default_instance_;
  delete EventResult_reflection_;
  delete DAAResult::default_instance_;
  delete DAAResult_reflection_;
  delete StateResult::default_instance_;
  delete StateResult_reflection_;
  delete LDMK::default_instance_;
  delete LDMK_reflection_;
  delete EyeResult::default_instance_;
  delete EyeResult_reflection_;
  delete SmokeResult::default_instance_;
  delete SmokeResult_reflection_;
  delete FaceROI::default_instance_;
  delete FaceROI_reflection_;
  delete FaceInfo::default_instance_;
  delete FaceInfo_reflection_;
  delete PersonInfo::default_instance_;
  delete PersonInfo_reflection_;
  delete VisionPercept::default_instance_;
  delete VisionPercept_reflection_;
  delete PerceptResult::default_instance_;
  delete PerceptResult_reflection_;
}

void protobuf_AddDesc_DMSSDKOutput_2eproto() {
  static bool already_here = false;
  if (already_here)
    return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      "\n\022DMSSDKOutput.proto\022\021DMSOutputProtocol\""
      "@\n\004Rect\022\014\n\004left\030\001 "
      "\002(\005\022\r\n\005right\030\002 \002(\005\022\013\n\003"
      "top\030\003 \002(\005\022\016\n\006bottom\030\004 "
      "\002(\005\",\n\tVector_3f\022\t"
      "\n\001x\030\001 \002(\002\022\t\n\001y\030\002 "
      "\002(\002\022\t\n\001z\030\003 \002(\002\"\035\n\005Point"
      "\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 "
      "\002(\005\"\246\004\n\014StateTrigger\022"
      "+\n\005ddw_l\030\001 \002(\0162\034.DMSOutputProtocol.State"
      "Enum\022+\n\005ddw_r\030\002 \002(\0162\034.DMSOutputProtocol."
      "StateEnum\022+\n\005ddw_u\030\003 \002(\0162\034.DMSOutputProt"
      "ocol.StateEnum\022+\n\005ddw_d\030\004 \002(\0162\034.DMSOutpu"
      "tProtocol.StateEnum\022,\n\006ddw_lu\030\005 \002(\0162\034.DM"
      "SOutputProtocol.StateEnum\022,\n\006ddw_ld\030\006 \002("
      "\0162\034.DMSOutputProtocol.StateEnum\022,\n\006ddw_r"
      "u\030\007 \002(\0162\034.DMSOutputProtocol.StateEnum\022,\n"
      "\006ddw_rd\030\010 \002(\0162\034.DMSOutputProtocol.StateE"
      "num\022)\n\003dfw\030\t \002(\0162\034.DMSOutputProtocol.Sta"
      "teEnum\022)\n\003dya\030\n \002(\0162\034.DMSOutputProtocol."
      "StateEnum\022)\n\003dca\030\013 \002(\0162\034.DMSOutputProtoc"
      "ol.StateEnum\022)\n\003dsa\030\014 \002(\0162\034.DMSOutputPro"
      "tocol.StateEnum\"\251\001\n\010EyeScore\022\027\n\017left_ope"
      "n_score\030\001 \002(\002\022\030\n\020left_close_score\030\002 "
      "\002(\002\022"
      "\031\n\021left_unknow_score\030\003 \002(\002\022\030\n\020right_open"
      "_score\030\004 \002(\002\022\031\n\021right_close_score\030\005 "
      "\002(\002\022"
      "\032\n\022right_unknow_score\030\006 \002(\002\"U\n\nSmokeScor"
      "e\022\027\n\017no_smoke_normal\030\001 \002(\002\022\024\n\014smoke_norm"
      "al\030\002 \002(\002\022\030\n\020no_smoke_suspect\030\003 "
      "\002(\002\"2\n\006Ro"
      "tRPY\022\014\n\004roll\030\001 \002(\002\022\r\n\005pitch\030\002 "
      "\002(\002\022\013\n\003yaw"
      "\030\003 \002(\002\">\n\tRotVector\0221\n\013unit_vector\030\001 "
      "\002(\013"
      "2\034.DMSOutputProtocol.Vector_3f\"\237\002\n\rFaceD"
      "irection\0220\n\010face_dir\030\001 \002(\0162\036.DMSOutputPr"
      "otocol.FaceDirEnum\0220\n\rcur_angle_rpy\030\002 \001("
      "\0132\031.DMSOutputProtocol.RotRPY\0220\n\ravr_angl"
      "e_rpy\030\003 \001(\0132\031.DMSOutputProtocol.RotRPY\022;"
      "\n\025cur_angle_unit_vector\030\004 \001(\0132\034.DMSOutpu"
      "tProtocol.RotVector\022;\n\025avr_angle_unit_ve"
      "ctor\030\005 \001(\0132\034.DMSOutputProtocol.RotVector"
      "\":\n\013EventResult\022+\n\005event\030\001 \002(\0162\034.DMSOutp"
      "utProtocol.EventEnum\"<\n\tDAAResult\022/\n\tdaa"
      "_event\030\001 \002(\0162\034.DMSOutputProtocol.EventEn"
      "um\":\n\013StateResult\022+\n\005state\030\001 \002(\0162\034.DMSOu"
      "tputProtocol.StateEnum\"=\n\004LDMK\0225\n\023face_f"
      "eature_points\030\001 \003(\0132\030.DMSOutputProtocol."
      "Point\"\345\001\n\tEyeResult\022)\n\004left\030\001 \002(\0162\033.DMSO"
      "utputProtocol.EyeState\022*\n\005right\030\002 \002(\0162\033."
      "DMSOutputProtocol.EyeState\022)\n\010left_roi\030\003"
      " \002(\0132\027.DMSOutputProtocol.Rect\022*\n\tright_r"
      "oi\030\004 \002(\0132\027.DMSOutputProtocol.Rect\022*\n\005sco"
      "re\030\005 \001(\0132\033.DMSOutputProtocol.EyeScore\"\233\001"
      "\n\013SmokeResult\0222\n\013smoke_state\030\001 \002(\0162\035.DMS"
      "OutputProtocol.SmokeState\022*\n\tsmoke_roi\030\002"
      " \002(\0132\027.DMSOutputProtocol.Rect\022,\n\005score\030\003"
      " \001(\0132\035.DMSOutputProtocol.SmokeScore\"B\n\007F"
      "aceROI\022)\n\010face_roi\030\001 \002(\0132\027.DMSOutputProt"
      "ocol.Rect\022\014\n\004conf\030\002 "
      "\001(\002\"\333\001\n\010FaceInfo\022+\n\004"
      "type\030\001 \002(\0162\035.DMSOutputProtocol.PersonTyp"
      "e\022,\n\010face_roi\030\002 \002(\0132\032.DMSOutputProtocol."
      "FaceROI\022%\n\004ldmk\030\003 \001(\0132\027.DMSOutputProtoco"
      "l.LDMK\022\023\n\013tracking_id\030\005 \001(\005\0228\n\016face_dire"
      "ction\030\n \001(\0132 .DMSOutputProtocol.FaceDire"
      "ction\"\250\002\n\nPersonInfo\022.\n\tface_info\030\001 \002(\0132"
      "\033.DMSOutputProtocol.FaceInfo\022\024\n\014face_fea"
      "ture\030\002 \001(\014\0220\n\neye_result\030\003 \001(\0132\034.DMSOutp"
      "utProtocol.EyeResult\0224\n\014smoke_result\030\004 \001"
      "(\0132\036.DMSOutputProtocol.SmokeResult\0224\n\014ev"
      "ent_result\030\006 \003(\0132\036.DMSOutputProtocol.Eve"
      "ntResult\0226\n\rstate_trigger\030\007 \001(\0132\037.DMSOut"
      "putProtocol.StateTrigger\"\312\001\n\rVisionPerce"
      "pt\0222\n\013camera_type\030\001 \002(\0162\035.DMSOutputProto"
      "col.CameraType\022\020\n\010frame_id\030\002 \002(\005\022\022\n\ntime"
      "_stamp\030\003 \002(\022\022-\n\006person\030\005 "
      "\003(\0132\035.DMSOutput"
      "Protocol.PersonInfo\0220\n\ndaa_result\030\006 \002(\0132"
      "\034.DMSOutputProtocol.DAAResult\"A\n\rPercept"
      "Result\0220\n\006vision\030\001 \003(\0132 .DMSOutputProtoc"
      "ol.VisionPercept*s\n\016ImageCheckEnum\022\026\n\022IM"
      "AGE_CHECK_NORMAL\020\000\022\027\n\023IMAGE_CHECK_BLURRE"
      "D\020\001\022\027\n\023IMAGE_CHECK_SHELTER\020\002\022\027\n\023IMAGE_CH"
      "ECK_FREEZED\020\003*@\n\010EyeState\022\021\n\rEYE_ST_UNKN"
      "OW\020\000\022\017\n\013EYE_ST_OPEN\020\001\022\020\n\014EYE_ST_"
      "CLOSE\020\002*"
      "K\n\nSmokeState\022\023\n\017SMOKE_ST_UNKNOW\020\000\022\022\n\016SM"
      "OKE_ST_EXIST\020\001\022\024\n\020SMOKE_ST_NOEXIST\020\002*\362\001\n"
      "\tStateEnum\022\016\n\nSTATE_NONE\020\000\022\017\n\013STATE_DDW_"
      "L\020\001\022\017\n\013STATE_DDW_R\020\002\022\017\n\013STATE_DDW_"
      "U\020\003\022\017\n"
      "\013STATE_DDW_D\020\004\022\020\n\014STATE_DDW_"
      "LU\020\005\022\020\n\014STAT"
      "E_DDW_RU\020\006\022\020\n\014STATE_DDW_LD\020\007\022\020\n\014STATE_DD"
      "W_RD\020\010\022\r\n\tSTATE_DFW\020\t\022\r\n\tSTATE_DYA\020\n\022\r\n\t"
      "STATE_DCA\020\013\022\r\n\tSTATE_DSA\020\014\022\r\n\tSTATE_DAA\020"
      "\r*\362\001\n\tEventEnum\022\016\n\nEVENT_"
      "NONE\020\000\022\017\n\013EVENT"
      "_DDW_L\020\001\022\017\n\013EVENT_DDW_R\020\002\022\017\n\013EVENT_DDW_U"
      "\020\003\022\017\n\013EVENT_DDW_D\020\004\022\020\n\014EVENT_DDW_"
      "LU\020\005\022\020\n"
      "\014EVENT_DDW_RU\020\006\022\020\n\014EVENT_DDW_"
      "LD\020\007\022\020\n\014EVE"
      "NT_DDW_RD\020\010\022\r\n\tEVENT_DFW\020\t\022\r\n\tEVENT_DYA\020"
      "\n\022\r\n\tEVENT_DCA\020\013\022\r\n\tEVENT_DSA\020\014\022\r\n\tEVENT"
      "_DAA\020\r*\333\001\n\013FaceDirEnum\022\023\n\017FACE_DIR_UNKNO"
      "W\020\000\022\022\n\016FACE_DIR_FRONT\020\001\022\021\n\rFACE_DIR_LEFT"
      "\020\002\022\022\n\016FACE_DIR_RIGHT\020\004\022\017\n\013FACE_DIR_"
      "UP\020\010\022"
      "\021\n\rFACE_DIR_DOWN\020\020\022\023\n\017FACE_DIR_LEFTUP\020\n\022"
      "\024\n\020FACE_DIR_RIGHTUP\020\014\022\025\n\021FACE_DIR_LEFTDO"
      "WN\020\022\022\026\n\022FACE_DIR_RIGHTDOWN\020\024*\\\n\nPersonTy"
      "pe\022\021\n\rPERSON_UNKNOW\020\000\022\021\n\rPERSON_DRIVER\020\001"
      "\022\022\n\016PERSON_COPILOT\020\002\022\024\n\020PERSON_PASSENGER"
      "\020\003*<\n\nCameraType\022\r\n\tCAMERA_IR\020\000\022\016\n\nCAMER"
      "A_RGB\020\001\022\017\n\013CAMERA_SIZE\020\002",
      4024);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
      "DMSSDKOutput.proto", &protobuf_RegisterTypes);
  Rect::default_instance_ = new Rect();
  Vector_3f::default_instance_ = new Vector_3f();
  Point::default_instance_ = new Point();
  StateTrigger::default_instance_ = new StateTrigger();
  EyeScore::default_instance_ = new EyeScore();
  SmokeScore::default_instance_ = new SmokeScore();
  RotRPY::default_instance_ = new RotRPY();
  RotVector::default_instance_ = new RotVector();
  FaceDirection::default_instance_ = new FaceDirection();
  EventResult::default_instance_ = new EventResult();
  DAAResult::default_instance_ = new DAAResult();
  StateResult::default_instance_ = new StateResult();
  LDMK::default_instance_ = new LDMK();
  EyeResult::default_instance_ = new EyeResult();
  SmokeResult::default_instance_ = new SmokeResult();
  FaceROI::default_instance_ = new FaceROI();
  FaceInfo::default_instance_ = new FaceInfo();
  PersonInfo::default_instance_ = new PersonInfo();
  VisionPercept::default_instance_ = new VisionPercept();
  PerceptResult::default_instance_ = new PerceptResult();
  Rect::default_instance_->InitAsDefaultInstance();
  Vector_3f::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  StateTrigger::default_instance_->InitAsDefaultInstance();
  EyeScore::default_instance_->InitAsDefaultInstance();
  SmokeScore::default_instance_->InitAsDefaultInstance();
  RotRPY::default_instance_->InitAsDefaultInstance();
  RotVector::default_instance_->InitAsDefaultInstance();
  FaceDirection::default_instance_->InitAsDefaultInstance();
  EventResult::default_instance_->InitAsDefaultInstance();
  DAAResult::default_instance_->InitAsDefaultInstance();
  StateResult::default_instance_->InitAsDefaultInstance();
  LDMK::default_instance_->InitAsDefaultInstance();
  EyeResult::default_instance_->InitAsDefaultInstance();
  SmokeResult::default_instance_->InitAsDefaultInstance();
  FaceROI::default_instance_->InitAsDefaultInstance();
  FaceInfo::default_instance_->InitAsDefaultInstance();
  PersonInfo::default_instance_->InitAsDefaultInstance();
  VisionPercept::default_instance_->InitAsDefaultInstance();
  PerceptResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(
      &protobuf_ShutdownFile_DMSSDKOutput_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DMSSDKOutput_2eproto {
  StaticDescriptorInitializer_DMSSDKOutput_2eproto() {
    protobuf_AddDesc_DMSSDKOutput_2eproto();
  }
} static_descriptor_initializer_DMSSDKOutput_2eproto_;
const ::google::protobuf::EnumDescriptor *ImageCheckEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageCheckEnum_descriptor_;
}
bool ImageCheckEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor *EyeState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EyeState_descriptor_;
}
bool EyeState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor *SmokeState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmokeState_descriptor_;
}
bool SmokeState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor *StateEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateEnum_descriptor_;
}
bool StateEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor *EventEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventEnum_descriptor_;
}
bool EventEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor *FaceDirEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceDirEnum_descriptor_;
}
bool FaceDirEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 10:
    case 12:
    case 16:
    case 18:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor *PersonType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PersonType_descriptor_;
}
bool PersonType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor *CameraType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraType_descriptor_;
}
bool CameraType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Rect::kLeftFieldNumber;
const int Rect::kRightFieldNumber;
const int Rect::kTopFieldNumber;
const int Rect::kBottomFieldNumber;
#endif  // !_MSC_VER

Rect::Rect() : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSOutputProtocol.Rect)
}

void Rect::InitAsDefaultInstance() {}

Rect::Rect(const Rect &from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSOutputProtocol.Rect)
}

void Rect::SharedCtor() {
  _cached_size_ = 0;
  left_ = 0;
  right_ = 0;
  top_ = 0;
  bottom_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:DMSOutputProtocol.Rect)
  SharedDtor();
}

void Rect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor *Rect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rect_descriptor_;
}

const Rect &Rect::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_DMSSDKOutput_2eproto();
  return *default_instance_;
}

Rect *Rect::default_instance_ = NULL;

Rect *Rect::New() const { return new Rect; }

void Rect::Clear() {
#define OFFSET_OF_FIELD_(f)                                     \
  (reinterpret_cast<char *>(&reinterpret_cast<Rect *>(16)->f) - \
   reinterpret_cast<char *>(16))

#define ZR_(first, last)                                  \
  do {                                                    \
    size_t f = OFFSET_OF_FIELD_(first);                   \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last); \
    ::memset(&first, 0, n);                               \
  } while (0)

  ZR_(left_, bottom_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION))    \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSOutputProtocol.Rect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 left = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &left_)));
          set_has_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16))
          goto parse_right;
        break;
      }

      // required int32 right = 2;
      case 2: {
        if (tag == 16) {
        parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &right_)));
          set_has_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24))
          goto parse_top;
        break;
      }

      // required int32 top = 3;
      case 3: {
        if (tag == 24) {
        parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &top_)));
          set_has_top();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32))
          goto parse_bottom;
        break;
      }

      // required int32 bottom = 4;
      case 4: {
        if (tag == 32) {
        parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &bottom_)));
          set_has_bottom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSOutputProtocol.Rect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSOutputProtocol.Rect)
  return false;
#undef DO_
}

void Rect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:DMSOutputProtocol.Rect)
  // required int32 left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->left(),
                                                             output);
  }

  // required int32 right = 2;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->right(),
                                                             output);
  }

  // required int32 top = 3;
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->top(),
                                                             output);
  }

  // required int32 bottom = 4;
  if (has_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bottom(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSOutputProtocol.Rect)
}

::google::protobuf::uint8 *Rect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSOutputProtocol.Rect)
  // required int32 left = 1;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->left(), target);
  }

  // required int32 right = 2;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        2, this->right(), target);
  }

  // required int32 top = 3;
  if (has_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        3, this->top(), target);
  }

  // required int32 bottom = 4;
  if (has_bottom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        4, this->bottom(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSOutputProtocol.Rect)
  return target;
}

int Rect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 left = 1;
    if (has_left()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->left());
    }

    // required int32 right = 2;
    if (has_right()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->right());
    }

    // required int32 top = 3;
    if (has_top()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->top());
    }

    // required int32 bottom = 4;
    if (has_bottom()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->bottom());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rect::MergeFrom(const ::google::protobuf::Message &from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rect *source =
      ::google::protobuf::internal::dynamic_cast_if_available<const Rect *>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rect::MergeFrom(const Rect &from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rect::CopyFrom(const ::google::protobuf::Message &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void Rect::CopyFrom(const Rect &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f)
    return false;

  return true;
}

void Rect::Swap(Rect *other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(top_, other->top_);
    std::swap(bottom_, other->bottom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rect_descriptor_;
  metadata.reflection = Rect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector_3f::kXFieldNumber;
const int Vector_3f::kYFieldNumber;
const int Vector_3f::kZFieldNumber;
#endif  // !_MSC_VER

Vector_3f::Vector_3f() : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSOutputProtocol.Vector_3f)
}

void Vector_3f::InitAsDefaultInstance() {}

Vector_3f::Vector_3f(const Vector_3f &from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSOutputProtocol.Vector_3f)
}

void Vector_3f::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector_3f::~Vector_3f() {
  // @@protoc_insertion_point(destructor:DMSOutputProtocol.Vector_3f)
  SharedDtor();
}

void Vector_3f::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector_3f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor *Vector_3f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector_3f_descriptor_;
}

const Vector_3f &Vector_3f::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_DMSSDKOutput_2eproto();
  return *default_instance_;
}

Vector_3f *Vector_3f::default_instance_ = NULL;

Vector_3f *Vector_3f::New() const { return new Vector_3f; }

void Vector_3f::Clear() {
#define OFFSET_OF_FIELD_(f)                                          \
  (reinterpret_cast<char *>(&reinterpret_cast<Vector_3f *>(16)->f) - \
   reinterpret_cast<char *>(16))

#define ZR_(first, last)                                  \
  do {                                                    \
    size_t f = OFFSET_OF_FIELD_(first);                   \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last); \
    ::memset(&first, 0, n);                               \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector_3f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION))    \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSOutputProtocol.Vector_3f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
              input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21))
          goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
        parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
              input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29))
          goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (tag == 29) {
        parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
              input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSOutputProtocol.Vector_3f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSOutputProtocol.Vector_3f)
  return false;
#undef DO_
}

void Vector_3f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:DMSOutputProtocol.Vector_3f)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(),
                                                             output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(),
                                                             output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSOutputProtocol.Vector_3f)
}

::google::protobuf::uint8 *Vector_3f::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSOutputProtocol.Vector_3f)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(
        1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(
        2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(
        3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSOutputProtocol.Vector_3f)
  return target;
}

int Vector_3f::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector_3f::MergeFrom(const ::google::protobuf::Message &from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector_3f *source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const Vector_3f *>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector_3f::MergeFrom(const Vector_3f &from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector_3f::CopyFrom(const ::google::protobuf::Message &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void Vector_3f::CopyFrom(const Vector_3f &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool Vector_3f::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007)
    return false;

  return true;
}

void Vector_3f::Swap(Vector_3f *other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector_3f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector_3f_descriptor_;
  metadata.reflection = Vector_3f_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !_MSC_VER

Point::Point() : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSOutputProtocol.Point)
}

void Point::InitAsDefaultInstance() {}

Point::Point(const Point &from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSOutputProtocol.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:DMSOutputProtocol.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor *Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point &Point::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_DMSSDKOutput_2eproto();
  return *default_instance_;
}

Point *Point::default_instance_ = NULL;

Point *Point::New() const { return new Point; }

void Point::Clear() {
#define OFFSET_OF_FIELD_(f)                                      \
  (reinterpret_cast<char *>(&reinterpret_cast<Point *>(16)->f) - \
   reinterpret_cast<char *>(16))

#define ZR_(first, last)                                  \
  do {                                                    \
    size_t f = OFFSET_OF_FIELD_(first);                   \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last); \
    ::memset(&first, 0, n);                               \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION))    \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSOutputProtocol.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(input,
                                                                         &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16))
          goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (tag == 16) {
        parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(input,
                                                                         &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSOutputProtocol.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSOutputProtocol.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:DMSOutputProtocol.Point)
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(),
                                                             output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSOutputProtocol.Point)
}

::google::protobuf::uint8 *Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSOutputProtocol.Point)
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSOutputProtocol.Point)
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->y());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message &from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point *source =
      ::google::protobuf::internal::dynamic_cast_if_available<const Point *>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point &from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003)
    return false;

  return true;
}

void Point::Swap(Point *other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StateTrigger::kDdwLFieldNumber;
const int StateTrigger::kDdwRFieldNumber;
const int StateTrigger::kDdwUFieldNumber;
const int StateTrigger::kDdwDFieldNumber;
const int StateTrigger::kDdwLuFieldNumber;
const int StateTrigger::kDdwLdFieldNumber;
const int StateTrigger::kDdwRuFieldNumber;
const int StateTrigger::kDdwRdFieldNumber;
const int StateTrigger::kDfwFieldNumber;
const int StateTrigger::kDyaFieldNumber;
const int StateTrigger::kDcaFieldNumber;
const int StateTrigger::kDsaFieldNumber;
#endif  // !_MSC_VER

StateTrigger::StateTrigger() : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSOutputProtocol.StateTrigger)
}

void StateTrigger::InitAsDefaultInstance() {}

StateTrigger::StateTrigger(const StateTrigger &from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSOutputProtocol.StateTrigger)
}

void StateTrigger::SharedCtor() {
  _cached_size_ = 0;
  ddw_l_ = 0;
  ddw_r_ = 0;
  ddw_u_ = 0;
  ddw_d_ = 0;
  ddw_lu_ = 0;
  ddw_ld_ = 0;
  ddw_ru_ = 0;
  ddw_rd_ = 0;
  dfw_ = 0;
  dya_ = 0;
  dca_ = 0;
  dsa_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateTrigger::~StateTrigger() {
  // @@protoc_insertion_point(destructor:DMSOutputProtocol.StateTrigger)
  SharedDtor();
}

void StateTrigger::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StateTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor *StateTrigger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateTrigger_descriptor_;
}

const StateTrigger &StateTrigger::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_DMSSDKOutput_2eproto();
  return *default_instance_;
}

StateTrigger *StateTrigger::default_instance_ = NULL;

StateTrigger *StateTrigger::New() const { return new StateTrigger; }

void StateTrigger::Clear() {
#define OFFSET_OF_FIELD_(f)                                             \
  (reinterpret_cast<char *>(&reinterpret_cast<StateTrigger *>(16)->f) - \
   reinterpret_cast<char *>(16))

#define ZR_(first, last)                                  \
  do {                                                    \
    size_t f = OFFSET_OF_FIELD_(first);                   \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last); \
    ::memset(&first, 0, n);                               \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ddw_l_, ddw_rd_);
  }
  ZR_(dfw_, dsa_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION))    \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSOutputProtocol.StateTrigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DMSOutputProtocol.StateEnum ddw_l = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          if (::DMSOutputProtocol::StateEnum_IsValid(value)) {
            set_ddw_l(static_cast< ::DMSOutputProtocol::StateEnum>(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16))
          goto parse_ddw_r;
        break;
      }

      // required .DMSOutputProtocol.StateEnum ddw_r = 2;
      case 2: {
        if (tag == 16) {
        parse_ddw_r:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          if (::DMSOutputProtocol::StateEnum_IsValid(value)) {
            set_ddw_r(static_cast< ::DMSOutputProtocol::StateEnum>(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24))
          goto parse_ddw_u;
        break;
      }

      // required .DMSOutputProtocol.StateEnum ddw_u = 3;
      case 3: {
        if (tag == 24) {
        parse_ddw_u:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          if (::DMSOutputProtocol::StateEnum_IsValid(value)) {
            set_ddw_u(static_cast< ::DMSOutputProtocol::StateEnum>(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32))
          goto parse_ddw_d;
        break;
      }

      // required .DMSOutputProtocol.StateEnum ddw_d = 4;
      case 4: {
        if (tag == 32) {
        parse_ddw_d:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          if (::DMSOutputProtocol::StateEnum_IsValid(value)) {
            set_ddw_d(static_cast< ::DMSOutputProtocol::StateEnum>(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40))
          goto parse_ddw_lu;
        break;
      }

      // required .DMSOutputProtocol.StateEnum ddw_lu = 5;
      case 5: {
        if (tag == 40) {
        parse_ddw_lu:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          if (::DMSOutputProtocol::StateEnum_IsValid(value)) {
            set_ddw_lu(static_cast< ::DMSOutputProtocol::StateEnum>(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48))
          goto parse_ddw_ld;
        break;
      }

      // required .DMSOutputProtocol.StateEnum ddw_ld = 6;
      case 6: {
        if (tag == 48) {
        parse_ddw_ld:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          if (::DMSOutputProtocol::StateEnum_IsValid(value)) {
            set_ddw_ld(static_cast< ::DMSOutputProtocol::StateEnum>(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56))
          goto parse_ddw_ru;
        break;
      }

      // required .DMSOutputProtocol.StateEnum ddw_ru = 7;
      case 7: {
        if (tag == 56) {
        parse_ddw_ru:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          if (::DMSOutputProtocol::StateEnum_IsValid(value)) {
            set_ddw_ru(static_cast< ::DMSOutputProtocol::StateEnum>(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64))
          goto parse_ddw_rd;
        break;
      }

      // required .DMSOutputProtocol.StateEnum ddw_rd = 8;
      case 8: {
        if (tag == 64) {
        parse_ddw_rd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          if (::DMSOutputProtocol::StateEnum_IsValid(value)) {
            set_ddw_rd(static_cast< ::DMSOutputProtocol::StateEnum>(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72))
          goto parse_dfw;
        break;
      }

      // required .DMSOutputProtocol.StateEnum dfw = 9;
      case 9: {
        if (tag == 72) {
        parse_dfw:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          if (::DMSOutputProtocol::StateEnum_IsValid(value)) {
            set_dfw(static_cast< ::DMSOutputProtocol::StateEnum>(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80))
          goto parse_dya;
        break;
      }

      // required .DMSOutputProtocol.StateEnum dya = 10;
      case 10: {
        if (tag == 80) {
        parse_dya:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          if (::DMSOutputProtocol::StateEnum_IsValid(value)) {
            set_dya(static_cast< ::DMSOutputProtocol::StateEnum>(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88))
          goto parse_dca;
        break;
      }

      // required .DMSOutputProtocol.StateEnum dca = 11;
      case 11: {
        if (tag == 88) {
        parse_dca:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          if (::DMSOutputProtocol::StateEnum_IsValid(value)) {
            set_dca(static_cast< ::DMSOutputProtocol::StateEnum>(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96))
          goto parse_dsa;
        break;
      }

      // required .DMSOutputProtocol.StateEnum dsa = 12;
      case 12: {
        if (tag == 96) {
        parse_dsa:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          if (::DMSOutputProtocol::StateEnum_IsValid(value)) {
            set_dsa(static_cast< ::DMSOutputProtocol::StateEnum>(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSOutputProtocol.StateTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSOutputProtocol.StateTrigger)
  return false;
#undef DO_
}

void StateTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:DMSOutputProtocol.StateTrigger)
  // required .DMSOutputProtocol.StateEnum ddw_l = 1;
  if (has_ddw_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(1, this->ddw_l(),
                                                            output);
  }

  // required .DMSOutputProtocol.StateEnum ddw_r = 2;
  if (has_ddw_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(2, this->ddw_r(),
                                                            output);
  }

  // required .DMSOutputProtocol.StateEnum ddw_u = 3;
  if (has_ddw_u()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(3, this->ddw_u(),
                                                            output);
  }

  // required .DMSOutputProtocol.StateEnum ddw_d = 4;
  if (has_ddw_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(4, this->ddw_d(),
                                                            output);
  }

  // required .DMSOutputProtocol.StateEnum ddw_lu = 5;
  if (has_ddw_lu()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(5, this->ddw_lu(),
                                                            output);
  }

  // required .DMSOutputProtocol.StateEnum ddw_ld = 6;
  if (has_ddw_ld()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(6, this->ddw_ld(),
                                                            output);
  }

  // required .DMSOutputProtocol.StateEnum ddw_ru = 7;
  if (has_ddw_ru()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(7, this->ddw_ru(),
                                                            output);
  }

  // required .DMSOutputProtocol.StateEnum ddw_rd = 8;
  if (has_ddw_rd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(8, this->ddw_rd(),
                                                            output);
  }

  // required .DMSOutputProtocol.StateEnum dfw = 9;
  if (has_dfw()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(9, this->dfw(),
                                                            output);
  }

  // required .DMSOutputProtocol.StateEnum dya = 10;
  if (has_dya()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(10, this->dya(),
                                                            output);
  }

  // required .DMSOutputProtocol.StateEnum dca = 11;
  if (has_dca()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(11, this->dca(),
                                                            output);
  }

  // required .DMSOutputProtocol.StateEnum dsa = 12;
  if (has_dsa()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(12, this->dsa(),
                                                            output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSOutputProtocol.StateTrigger)
}

::google::protobuf::uint8 *StateTrigger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSOutputProtocol.StateTrigger)
  // required .DMSOutputProtocol.StateEnum ddw_l = 1;
  if (has_ddw_l()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        1, this->ddw_l(), target);
  }

  // required .DMSOutputProtocol.StateEnum ddw_r = 2;
  if (has_ddw_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        2, this->ddw_r(), target);
  }

  // required .DMSOutputProtocol.StateEnum ddw_u = 3;
  if (has_ddw_u()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        3, this->ddw_u(), target);
  }

  // required .DMSOutputProtocol.StateEnum ddw_d = 4;
  if (has_ddw_d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        4, this->ddw_d(), target);
  }

  // required .DMSOutputProtocol.StateEnum ddw_lu = 5;
  if (has_ddw_lu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        5, this->ddw_lu(), target);
  }

  // required .DMSOutputProtocol.StateEnum ddw_ld = 6;
  if (has_ddw_ld()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        6, this->ddw_ld(), target);
  }

  // required .DMSOutputProtocol.StateEnum ddw_ru = 7;
  if (has_ddw_ru()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        7, this->ddw_ru(), target);
  }

  // required .DMSOutputProtocol.StateEnum ddw_rd = 8;
  if (has_ddw_rd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        8, this->ddw_rd(), target);
  }

  // required .DMSOutputProtocol.StateEnum dfw = 9;
  if (has_dfw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        9, this->dfw(), target);
  }

  // required .DMSOutputProtocol.StateEnum dya = 10;
  if (has_dya()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        10, this->dya(), target);
  }

  // required .DMSOutputProtocol.StateEnum dca = 11;
  if (has_dca()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        11, this->dca(), target);
  }

  // required .DMSOutputProtocol.StateEnum dsa = 12;
  if (has_dsa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        12, this->dsa(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSOutputProtocol.StateTrigger)
  return target;
}

int StateTrigger::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DMSOutputProtocol.StateEnum ddw_l = 1;
    if (has_ddw_l()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                            this->ddw_l());
    }

    // required .DMSOutputProtocol.StateEnum ddw_r = 2;
    if (has_ddw_r()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                            this->ddw_r());
    }

    // required .DMSOutputProtocol.StateEnum ddw_u = 3;
    if (has_ddw_u()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                            this->ddw_u());
    }

    // required .DMSOutputProtocol.StateEnum ddw_d = 4;
    if (has_ddw_d()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                            this->ddw_d());
    }

    // required .DMSOutputProtocol.StateEnum ddw_lu = 5;
    if (has_ddw_lu()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                            this->ddw_lu());
    }

    // required .DMSOutputProtocol.StateEnum ddw_ld = 6;
    if (has_ddw_ld()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                            this->ddw_ld());
    }

    // required .DMSOutputProtocol.StateEnum ddw_ru = 7;
    if (has_ddw_ru()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                            this->ddw_ru());
    }

    // required .DMSOutputProtocol.StateEnum ddw_rd = 8;
    if (has_ddw_rd()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                            this->ddw_rd());
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .DMSOutputProtocol.StateEnum dfw = 9;
    if (has_dfw()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                            this->dfw());
    }

    // required .DMSOutputProtocol.StateEnum dya = 10;
    if (has_dya()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                            this->dya());
    }

    // required .DMSOutputProtocol.StateEnum dca = 11;
    if (has_dca()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                            this->dca());
    }

    // required .DMSOutputProtocol.StateEnum dsa = 12;
    if (has_dsa()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                            this->dsa());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateTrigger::MergeFrom(const ::google::protobuf::Message &from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateTrigger *source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const StateTrigger *>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateTrigger::MergeFrom(const StateTrigger &from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ddw_l()) {
      set_ddw_l(from.ddw_l());
    }
    if (from.has_ddw_r()) {
      set_ddw_r(from.ddw_r());
    }
    if (from.has_ddw_u()) {
      set_ddw_u(from.ddw_u());
    }
    if (from.has_ddw_d()) {
      set_ddw_d(from.ddw_d());
    }
    if (from.has_ddw_lu()) {
      set_ddw_lu(from.ddw_lu());
    }
    if (from.has_ddw_ld()) {
      set_ddw_ld(from.ddw_ld());
    }
    if (from.has_ddw_ru()) {
      set_ddw_ru(from.ddw_ru());
    }
    if (from.has_ddw_rd()) {
      set_ddw_rd(from.ddw_rd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dfw()) {
      set_dfw(from.dfw());
    }
    if (from.has_dya()) {
      set_dya(from.dya());
    }
    if (from.has_dca()) {
      set_dca(from.dca());
    }
    if (from.has_dsa()) {
      set_dsa(from.dsa());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateTrigger::CopyFrom(const ::google::protobuf::Message &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void StateTrigger::CopyFrom(const StateTrigger &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool StateTrigger::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff)
    return false;

  return true;
}

void StateTrigger::Swap(StateTrigger *other) {
  if (other != this) {
    std::swap(ddw_l_, other->ddw_l_);
    std::swap(ddw_r_, other->ddw_r_);
    std::swap(ddw_u_, other->ddw_u_);
    std::swap(ddw_d_, other->ddw_d_);
    std::swap(ddw_lu_, other->ddw_lu_);
    std::swap(ddw_ld_, other->ddw_ld_);
    std::swap(ddw_ru_, other->ddw_ru_);
    std::swap(ddw_rd_, other->ddw_rd_);
    std::swap(dfw_, other->dfw_);
    std::swap(dya_, other->dya_);
    std::swap(dca_, other->dca_);
    std::swap(dsa_, other->dsa_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateTrigger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateTrigger_descriptor_;
  metadata.reflection = StateTrigger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EyeScore::kLeftOpenScoreFieldNumber;
const int EyeScore::kLeftCloseScoreFieldNumber;
const int EyeScore::kLeftUnknowScoreFieldNumber;
const int EyeScore::kRightOpenScoreFieldNumber;
const int EyeScore::kRightCloseScoreFieldNumber;
const int EyeScore::kRightUnknowScoreFieldNumber;
#endif  // !_MSC_VER

EyeScore::EyeScore() : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSOutputProtocol.EyeScore)
}

void EyeScore::InitAsDefaultInstance() {}

EyeScore::EyeScore(const EyeScore &from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSOutputProtocol.EyeScore)
}

void EyeScore::SharedCtor() {
  _cached_size_ = 0;
  left_open_score_ = 0;
  left_close_score_ = 0;
  left_unknow_score_ = 0;
  right_open_score_ = 0;
  right_close_score_ = 0;
  right_unknow_score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EyeScore::~EyeScore() {
  // @@protoc_insertion_point(destructor:DMSOutputProtocol.EyeScore)
  SharedDtor();
}

void EyeScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EyeScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor *EyeScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EyeScore_descriptor_;
}

const EyeScore &EyeScore::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_DMSSDKOutput_2eproto();
  return *default_instance_;
}

EyeScore *EyeScore::default_instance_ = NULL;

EyeScore *EyeScore::New() const { return new EyeScore; }

void EyeScore::Clear() {
#define OFFSET_OF_FIELD_(f)                                         \
  (reinterpret_cast<char *>(&reinterpret_cast<EyeScore *>(16)->f) - \
   reinterpret_cast<char *>(16))

#define ZR_(first, last)                                  \
  do {                                                    \
    size_t f = OFFSET_OF_FIELD_(first);                   \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last); \
    ::memset(&first, 0, n);                               \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(left_open_score_, right_unknow_score_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EyeScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION))    \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSOutputProtocol.EyeScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float left_open_score = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
              input, &left_open_score_)));
          set_has_left_open_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21))
          goto parse_left_close_score;
        break;
      }

      // required float left_close_score = 2;
      case 2: {
        if (tag == 21) {
        parse_left_close_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
              input, &left_close_score_)));
          set_has_left_close_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29))
          goto parse_left_unknow_score;
        break;
      }

      // required float left_unknow_score = 3;
      case 3: {
        if (tag == 29) {
        parse_left_unknow_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
              input, &left_unknow_score_)));
          set_has_left_unknow_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37))
          goto parse_right_open_score;
        break;
      }

      // required float right_open_score = 4;
      case 4: {
        if (tag == 37) {
        parse_right_open_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
              input, &right_open_score_)));
          set_has_right_open_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45))
          goto parse_right_close_score;
        break;
      }

      // required float right_close_score = 5;
      case 5: {
        if (tag == 45) {
        parse_right_close_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
              input, &right_close_score_)));
          set_has_right_close_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53))
          goto parse_right_unknow_score;
        break;
      }

      // required float right_unknow_score = 6;
      case 6: {
        if (tag == 53) {
        parse_right_unknow_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
              input, &right_unknow_score_)));
          set_has_right_unknow_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSOutputProtocol.EyeScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSOutputProtocol.EyeScore)
  return false;
#undef DO_
}

void EyeScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:DMSOutputProtocol.EyeScore)
  // required float left_open_score = 1;
  if (has_left_open_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
        1, this->left_open_score(), output);
  }

  // required float left_close_score = 2;
  if (has_left_close_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
        2, this->left_close_score(), output);
  }

  // required float left_unknow_score = 3;
  if (has_left_unknow_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
        3, this->left_unknow_score(), output);
  }

  // required float right_open_score = 4;
  if (has_right_open_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
        4, this->right_open_score(), output);
  }

  // required float right_close_score = 5;
  if (has_right_close_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
        5, this->right_close_score(), output);
  }

  // required float right_unknow_score = 6;
  if (has_right_unknow_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
        6, this->right_unknow_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSOutputProtocol.EyeScore)
}

::google::protobuf::uint8 *EyeScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSOutputProtocol.EyeScore)
  // required float left_open_score = 1;
  if (has_left_open_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(
        1, this->left_open_score(), target);
  }

  // required float left_close_score = 2;
  if (has_left_close_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(
        2, this->left_close_score(), target);
  }

  // required float left_unknow_score = 3;
  if (has_left_unknow_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(
        3, this->left_unknow_score(), target);
  }

  // required float right_open_score = 4;
  if (has_right_open_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(
        4, this->right_open_score(), target);
  }

  // required float right_close_score = 5;
  if (has_right_close_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(
        5, this->right_close_score(), target);
  }

  // required float right_unknow_score = 6;
  if (has_right_unknow_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(
        6, this->right_unknow_score(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSOutputProtocol.EyeScore)
  return target;
}

int EyeScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float left_open_score = 1;
    if (has_left_open_score()) {
      total_size += 1 + 4;
    }

    // required float left_close_score = 2;
    if (has_left_close_score()) {
      total_size += 1 + 4;
    }

    // required float left_unknow_score = 3;
    if (has_left_unknow_score()) {
      total_size += 1 + 4;
    }

    // required float right_open_score = 4;
    if (has_right_open_score()) {
      total_size += 1 + 4;
    }

    // required float right_close_score = 5;
    if (has_right_close_score()) {
      total_size += 1 + 4;
    }

    // required float right_unknow_score = 6;
    if (has_right_unknow_score()) {
      total_size += 1 + 4;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EyeScore::MergeFrom(const ::google::protobuf::Message &from) {
  GOOGLE_CHECK_NE(&from, this);
  const EyeScore *source =
      ::google::protobuf::internal::dynamic_cast_if_available<const EyeScore *>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EyeScore::MergeFrom(const EyeScore &from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_open_score()) {
      set_left_open_score(from.left_open_score());
    }
    if (from.has_left_close_score()) {
      set_left_close_score(from.left_close_score());
    }
    if (from.has_left_unknow_score()) {
      set_left_unknow_score(from.left_unknow_score());
    }
    if (from.has_right_open_score()) {
      set_right_open_score(from.right_open_score());
    }
    if (from.has_right_close_score()) {
      set_right_close_score(from.right_close_score());
    }
    if (from.has_right_unknow_score()) {
      set_right_unknow_score(from.right_unknow_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EyeScore::CopyFrom(const ::google::protobuf::Message &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void EyeScore::CopyFrom(const EyeScore &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool EyeScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f)
    return false;

  return true;
}

void EyeScore::Swap(EyeScore *other) {
  if (other != this) {
    std::swap(left_open_score_, other->left_open_score_);
    std::swap(left_close_score_, other->left_close_score_);
    std::swap(left_unknow_score_, other->left_unknow_score_);
    std::swap(right_open_score_, other->right_open_score_);
    std::swap(right_close_score_, other->right_close_score_);
    std::swap(right_unknow_score_, other->right_unknow_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EyeScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EyeScore_descriptor_;
  metadata.reflection = EyeScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SmokeScore::kNoSmokeNormalFieldNumber;
const int SmokeScore::kSmokeNormalFieldNumber;
const int SmokeScore::kNoSmokeSuspectFieldNumber;
#endif  // !_MSC_VER

SmokeScore::SmokeScore() : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSOutputProtocol.SmokeScore)
}

void SmokeScore::InitAsDefaultInstance() {}

SmokeScore::SmokeScore(const SmokeScore &from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSOutputProtocol.SmokeScore)
}

void SmokeScore::SharedCtor() {
  _cached_size_ = 0;
  no_smoke_normal_ = 0;
  smoke_normal_ = 0;
  no_smoke_suspect_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmokeScore::~SmokeScore() {
  // @@protoc_insertion_point(destructor:DMSOutputProtocol.SmokeScore)
  SharedDtor();
}

void SmokeScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SmokeScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor *SmokeScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmokeScore_descriptor_;
}

const SmokeScore &SmokeScore::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_DMSSDKOutput_2eproto();
  return *default_instance_;
}

SmokeScore *SmokeScore::default_instance_ = NULL;

SmokeScore *SmokeScore::New() const { return new SmokeScore; }

void SmokeScore::Clear() {
#define OFFSET_OF_FIELD_(f)                                           \
  (reinterpret_cast<char *>(&reinterpret_cast<SmokeScore *>(16)->f) - \
   reinterpret_cast<char *>(16))

#define ZR_(first, last)                                  \
  do {                                                    \
    size_t f = OFFSET_OF_FIELD_(first);                   \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last); \
    ::memset(&first, 0, n);                               \
  } while (0)

  ZR_(no_smoke_normal_, no_smoke_suspect_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmokeScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION))    \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSOutputProtocol.SmokeScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float no_smoke_normal = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
              input, &no_smoke_normal_)));
          set_has_no_smoke_normal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21))
          goto parse_smoke_normal;
        break;
      }

      // required float smoke_normal = 2;
      case 2: {
        if (tag == 21) {
        parse_smoke_normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
              input, &smoke_normal_)));
          set_has_smoke_normal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29))
          goto parse_no_smoke_suspect;
        break;
      }

      // required float no_smoke_suspect = 3;
      case 3: {
        if (tag == 29) {
        parse_no_smoke_suspect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
              input, &no_smoke_suspect_)));
          set_has_no_smoke_suspect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSOutputProtocol.SmokeScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSOutputProtocol.SmokeScore)
  return false;
#undef DO_
}

void SmokeScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:DMSOutputProtocol.SmokeScore)
  // required float no_smoke_normal = 1;
  if (has_no_smoke_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
        1, this->no_smoke_normal(), output);
  }

  // required float smoke_normal = 2;
  if (has_smoke_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
        2, this->smoke_normal(), output);
  }

  // required float no_smoke_suspect = 3;
  if (has_no_smoke_suspect()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
        3, this->no_smoke_suspect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSOutputProtocol.SmokeScore)
}

::google::protobuf::uint8 *SmokeScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSOutputProtocol.SmokeScore)
  // required float no_smoke_normal = 1;
  if (has_no_smoke_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(
        1, this->no_smoke_normal(), target);
  }

  // required float smoke_normal = 2;
  if (has_smoke_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(
        2, this->smoke_normal(), target);
  }

  // required float no_smoke_suspect = 3;
  if (has_no_smoke_suspect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(
        3, this->no_smoke_suspect(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSOutputProtocol.SmokeScore)
  return target;
}

int SmokeScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float no_smoke_normal = 1;
    if (has_no_smoke_normal()) {
      total_size += 1 + 4;
    }

    // required float smoke_normal = 2;
    if (has_smoke_normal()) {
      total_size += 1 + 4;
    }

    // required float no_smoke_suspect = 3;
    if (has_no_smoke_suspect()) {
      total_size += 1 + 4;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmokeScore::MergeFrom(const ::google::protobuf::Message &from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmokeScore *source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SmokeScore *>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmokeScore::MergeFrom(const SmokeScore &from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_no_smoke_normal()) {
      set_no_smoke_normal(from.no_smoke_normal());
    }
    if (from.has_smoke_normal()) {
      set_smoke_normal(from.smoke_normal());
    }
    if (from.has_no_smoke_suspect()) {
      set_no_smoke_suspect(from.no_smoke_suspect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmokeScore::CopyFrom(const ::google::protobuf::Message &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void SmokeScore::CopyFrom(const SmokeScore &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool SmokeScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007)
    return false;

  return true;
}

void SmokeScore::Swap(SmokeScore *other) {
  if (other != this) {
    std::swap(no_smoke_normal_, other->no_smoke_normal_);
    std::swap(smoke_normal_, other->smoke_normal_);
    std::swap(no_smoke_suspect_, other->no_smoke_suspect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmokeScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmokeScore_descriptor_;
  metadata.reflection = SmokeScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RotRPY::kRollFieldNumber;
const int RotRPY::kPitchFieldNumber;
const int RotRPY::kYawFieldNumber;
#endif  // !_MSC_VER

RotRPY::RotRPY() : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSOutputProtocol.RotRPY)
}

void RotRPY::InitAsDefaultInstance() {}

RotRPY::RotRPY(const RotRPY &from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSOutputProtocol.RotRPY)
}

void RotRPY::SharedCtor() {
  _cached_size_ = 0;
  roll_ = 0;
  pitch_ = 0;
  yaw_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotRPY::~RotRPY() {
  // @@protoc_insertion_point(destructor:DMSOutputProtocol.RotRPY)
  SharedDtor();
}

void RotRPY::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RotRPY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor *RotRPY::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotRPY_descriptor_;
}

const RotRPY &RotRPY::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_DMSSDKOutput_2eproto();
  return *default_instance_;
}

RotRPY *RotRPY::default_instance_ = NULL;

RotRPY *RotRPY::New() const { return new RotRPY; }

void RotRPY::Clear() {
#define OFFSET_OF_FIELD_(f)                                       \
  (reinterpret_cast<char *>(&reinterpret_cast<RotRPY *>(16)->f) - \
   reinterpret_cast<char *>(16))

#define ZR_(first, last)                                  \
  do {                                                    \
    size_t f = OFFSET_OF_FIELD_(first);                   \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last); \
    ::memset(&first, 0, n);                               \
  } while (0)

  ZR_(roll_, yaw_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotRPY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION))    \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSOutputProtocol.RotRPY)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float roll = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
              input, &roll_)));
          set_has_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21))
          goto parse_pitch;
        break;
      }

      // required float pitch = 2;
      case 2: {
        if (tag == 21) {
        parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
              input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29))
          goto parse_yaw;
        break;
      }

      // required float yaw = 3;
      case 3: {
        if (tag == 29) {
        parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
              input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSOutputProtocol.RotRPY)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSOutputProtocol.RotRPY)
  return false;
#undef DO_
}

void RotRPY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:DMSOutputProtocol.RotRPY)
  // required float roll = 1;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->roll(),
                                                             output);
  }

  // required float pitch = 2;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pitch(),
                                                             output);
  }

  // required float yaw = 3;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yaw(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSOutputProtocol.RotRPY)
}

::google::protobuf::uint8 *RotRPY::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSOutputProtocol.RotRPY)
  // required float roll = 1;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(
        1, this->roll(), target);
  }

  // required float pitch = 2;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(
        2, this->pitch(), target);
  }

  // required float yaw = 3;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(
        3, this->yaw(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSOutputProtocol.RotRPY)
  return target;
}

int RotRPY::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float roll = 1;
    if (has_roll()) {
      total_size += 1 + 4;
    }

    // required float pitch = 2;
    if (has_pitch()) {
      total_size += 1 + 4;
    }

    // required float yaw = 3;
    if (has_yaw()) {
      total_size += 1 + 4;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotRPY::MergeFrom(const ::google::protobuf::Message &from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotRPY *source =
      ::google::protobuf::internal::dynamic_cast_if_available<const RotRPY *>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotRPY::MergeFrom(const RotRPY &from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotRPY::CopyFrom(const ::google::protobuf::Message &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void RotRPY::CopyFrom(const RotRPY &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool RotRPY::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007)
    return false;

  return true;
}

void RotRPY::Swap(RotRPY *other) {
  if (other != this) {
    std::swap(roll_, other->roll_);
    std::swap(pitch_, other->pitch_);
    std::swap(yaw_, other->yaw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotRPY::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotRPY_descriptor_;
  metadata.reflection = RotRPY_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RotVector::kUnitVectorFieldNumber;
#endif  // !_MSC_VER

RotVector::RotVector() : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSOutputProtocol.RotVector)
}

void RotVector::InitAsDefaultInstance() {
  unit_vector_ = const_cast< ::DMSOutputProtocol::Vector_3f *>(
      &::DMSOutputProtocol::Vector_3f::default_instance());
}

RotVector::RotVector(const RotVector &from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSOutputProtocol.RotVector)
}

void RotVector::SharedCtor() {
  _cached_size_ = 0;
  unit_vector_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RotVector::~RotVector() {
  // @@protoc_insertion_point(destructor:DMSOutputProtocol.RotVector)
  SharedDtor();
}

void RotVector::SharedDtor() {
  if (this != default_instance_) {
    delete unit_vector_;
  }
}

void RotVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor *RotVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RotVector_descriptor_;
}

const RotVector &RotVector::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_DMSSDKOutput_2eproto();
  return *default_instance_;
}

RotVector *RotVector::default_instance_ = NULL;

RotVector *RotVector::New() const { return new RotVector; }

void RotVector::Clear() {
  if (has_unit_vector()) {
    if (unit_vector_ != NULL)
      unit_vector_->::DMSOutputProtocol::Vector_3f::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RotVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION))    \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSOutputProtocol.RotVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DMSOutputProtocol.Vector_3f unit_vector = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_unit_vector()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSOutputProtocol.RotVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSOutputProtocol.RotVector)
  return false;
#undef DO_
}

void RotVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:DMSOutputProtocol.RotVector)
  // required .DMSOutputProtocol.Vector_3f unit_vector = 1;
  if (has_unit_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->unit_vector(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSOutputProtocol.RotVector)
}

::google::protobuf::uint8 *RotVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSOutputProtocol.RotVector)
  // required .DMSOutputProtocol.Vector_3f unit_vector = 1;
  if (has_unit_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(1, this->unit_vector(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSOutputProtocol.RotVector)
  return target;
}

int RotVector::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DMSOutputProtocol.Vector_3f unit_vector = 1;
    if (has_unit_vector()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
              this->unit_vector());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotVector::MergeFrom(const ::google::protobuf::Message &from) {
  GOOGLE_CHECK_NE(&from, this);
  const RotVector *source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const RotVector *>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RotVector::MergeFrom(const RotVector &from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit_vector()) {
      mutable_unit_vector()->::DMSOutputProtocol::Vector_3f::MergeFrom(
          from.unit_vector());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RotVector::CopyFrom(const ::google::protobuf::Message &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void RotVector::CopyFrom(const RotVector &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool RotVector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001)
    return false;

  if (has_unit_vector()) {
    if (!this->unit_vector().IsInitialized())
      return false;
  }
  return true;
}

void RotVector::Swap(RotVector *other) {
  if (other != this) {
    std::swap(unit_vector_, other->unit_vector_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RotVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RotVector_descriptor_;
  metadata.reflection = RotVector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FaceDirection::kFaceDirFieldNumber;
const int FaceDirection::kCurAngleRpyFieldNumber;
const int FaceDirection::kAvrAngleRpyFieldNumber;
const int FaceDirection::kCurAngleUnitVectorFieldNumber;
const int FaceDirection::kAvrAngleUnitVectorFieldNumber;
#endif  // !_MSC_VER

FaceDirection::FaceDirection() : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSOutputProtocol.FaceDirection)
}

void FaceDirection::InitAsDefaultInstance() {
  cur_angle_rpy_ = const_cast< ::DMSOutputProtocol::RotRPY *>(
      &::DMSOutputProtocol::RotRPY::default_instance());
  avr_angle_rpy_ = const_cast< ::DMSOutputProtocol::RotRPY *>(
      &::DMSOutputProtocol::RotRPY::default_instance());
  cur_angle_unit_vector_ = const_cast< ::DMSOutputProtocol::RotVector *>(
      &::DMSOutputProtocol::RotVector::default_instance());
  avr_angle_unit_vector_ = const_cast< ::DMSOutputProtocol::RotVector *>(
      &::DMSOutputProtocol::RotVector::default_instance());
}

FaceDirection::FaceDirection(const FaceDirection &from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSOutputProtocol.FaceDirection)
}

void FaceDirection::SharedCtor() {
  _cached_size_ = 0;
  face_dir_ = 0;
  cur_angle_rpy_ = NULL;
  avr_angle_rpy_ = NULL;
  cur_angle_unit_vector_ = NULL;
  avr_angle_unit_vector_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaceDirection::~FaceDirection() {
  // @@protoc_insertion_point(destructor:DMSOutputProtocol.FaceDirection)
  SharedDtor();
}

void FaceDirection::SharedDtor() {
  if (this != default_instance_) {
    delete cur_angle_rpy_;
    delete avr_angle_rpy_;
    delete cur_angle_unit_vector_;
    delete avr_angle_unit_vector_;
  }
}

void FaceDirection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor *FaceDirection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceDirection_descriptor_;
}

const FaceDirection &FaceDirection::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_DMSSDKOutput_2eproto();
  return *default_instance_;
}

FaceDirection *FaceDirection::default_instance_ = NULL;

FaceDirection *FaceDirection::New() const { return new FaceDirection; }

void FaceDirection::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    face_dir_ = 0;
    if (has_cur_angle_rpy()) {
      if (cur_angle_rpy_ != NULL)
        cur_angle_rpy_->::DMSOutputProtocol::RotRPY::Clear();
    }
    if (has_avr_angle_rpy()) {
      if (avr_angle_rpy_ != NULL)
        avr_angle_rpy_->::DMSOutputProtocol::RotRPY::Clear();
    }
    if (has_cur_angle_unit_vector()) {
      if (cur_angle_unit_vector_ != NULL)
        cur_angle_unit_vector_->::DMSOutputProtocol::RotVector::Clear();
    }
    if (has_avr_angle_unit_vector()) {
      if (avr_angle_unit_vector_ != NULL)
        avr_angle_unit_vector_->::DMSOutputProtocol::RotVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaceDirection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION))    \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSOutputProtocol.FaceDirection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DMSOutputProtocol.FaceDirEnum face_dir = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          if (::DMSOutputProtocol::FaceDirEnum_IsValid(value)) {
            set_face_dir(static_cast< ::DMSOutputProtocol::FaceDirEnum>(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18))
          goto parse_cur_angle_rpy;
        break;
      }

      // optional .DMSOutputProtocol.RotRPY cur_angle_rpy = 2;
      case 2: {
        if (tag == 18) {
        parse_cur_angle_rpy:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_cur_angle_rpy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26))
          goto parse_avr_angle_rpy;
        break;
      }

      // optional .DMSOutputProtocol.RotRPY avr_angle_rpy = 3;
      case 3: {
        if (tag == 26) {
        parse_avr_angle_rpy:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_avr_angle_rpy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34))
          goto parse_cur_angle_unit_vector;
        break;
      }

      // optional .DMSOutputProtocol.RotVector cur_angle_unit_vector = 4;
      case 4: {
        if (tag == 34) {
        parse_cur_angle_unit_vector:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_cur_angle_unit_vector()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42))
          goto parse_avr_angle_unit_vector;
        break;
      }

      // optional .DMSOutputProtocol.RotVector avr_angle_unit_vector = 5;
      case 5: {
        if (tag == 42) {
        parse_avr_angle_unit_vector:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_avr_angle_unit_vector()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSOutputProtocol.FaceDirection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSOutputProtocol.FaceDirection)
  return false;
#undef DO_
}

void FaceDirection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:DMSOutputProtocol.FaceDirection)
  // required .DMSOutputProtocol.FaceDirEnum face_dir = 1;
  if (has_face_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(1, this->face_dir(),
                                                            output);
  }

  // optional .DMSOutputProtocol.RotRPY cur_angle_rpy = 2;
  if (has_cur_angle_rpy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->cur_angle_rpy(), output);
  }

  // optional .DMSOutputProtocol.RotRPY avr_angle_rpy = 3;
  if (has_avr_angle_rpy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->avr_angle_rpy(), output);
  }

  // optional .DMSOutputProtocol.RotVector cur_angle_unit_vector = 4;
  if (has_cur_angle_unit_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->cur_angle_unit_vector(), output);
  }

  // optional .DMSOutputProtocol.RotVector avr_angle_unit_vector = 5;
  if (has_avr_angle_unit_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, this->avr_angle_unit_vector(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSOutputProtocol.FaceDirection)
}

::google::protobuf::uint8 *FaceDirection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSOutputProtocol.FaceDirection)
  // required .DMSOutputProtocol.FaceDirEnum face_dir = 1;
  if (has_face_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        1, this->face_dir(), target);
  }

  // optional .DMSOutputProtocol.RotRPY cur_angle_rpy = 2;
  if (has_cur_angle_rpy()) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(2, this->cur_angle_rpy(), target);
  }

  // optional .DMSOutputProtocol.RotRPY avr_angle_rpy = 3;
  if (has_avr_angle_rpy()) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(3, this->avr_angle_rpy(), target);
  }

  // optional .DMSOutputProtocol.RotVector cur_angle_unit_vector = 4;
  if (has_cur_angle_unit_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(4, this->cur_angle_unit_vector(), target);
  }

  // optional .DMSOutputProtocol.RotVector avr_angle_unit_vector = 5;
  if (has_avr_angle_unit_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(5, this->avr_angle_unit_vector(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSOutputProtocol.FaceDirection)
  return target;
}

int FaceDirection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DMSOutputProtocol.FaceDirEnum face_dir = 1;
    if (has_face_dir()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                            this->face_dir());
    }

    // optional .DMSOutputProtocol.RotRPY cur_angle_rpy = 2;
    if (has_cur_angle_rpy()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
              this->cur_angle_rpy());
    }

    // optional .DMSOutputProtocol.RotRPY avr_angle_rpy = 3;
    if (has_avr_angle_rpy()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
              this->avr_angle_rpy());
    }

    // optional .DMSOutputProtocol.RotVector cur_angle_unit_vector = 4;
    if (has_cur_angle_unit_vector()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
              this->cur_angle_unit_vector());
    }

    // optional .DMSOutputProtocol.RotVector avr_angle_unit_vector = 5;
    if (has_avr_angle_unit_vector()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
              this->avr_angle_unit_vector());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceDirection::MergeFrom(const ::google::protobuf::Message &from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaceDirection *source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const FaceDirection *>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaceDirection::MergeFrom(const FaceDirection &from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_face_dir()) {
      set_face_dir(from.face_dir());
    }
    if (from.has_cur_angle_rpy()) {
      mutable_cur_angle_rpy()->::DMSOutputProtocol::RotRPY::MergeFrom(
          from.cur_angle_rpy());
    }
    if (from.has_avr_angle_rpy()) {
      mutable_avr_angle_rpy()->::DMSOutputProtocol::RotRPY::MergeFrom(
          from.avr_angle_rpy());
    }
    if (from.has_cur_angle_unit_vector()) {
      mutable_cur_angle_unit_vector()
          ->::DMSOutputProtocol::RotVector::MergeFrom(
              from.cur_angle_unit_vector());
    }
    if (from.has_avr_angle_unit_vector()) {
      mutable_avr_angle_unit_vector()
          ->::DMSOutputProtocol::RotVector::MergeFrom(
              from.avr_angle_unit_vector());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaceDirection::CopyFrom(const ::google::protobuf::Message &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void FaceDirection::CopyFrom(const FaceDirection &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool FaceDirection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001)
    return false;

  if (has_cur_angle_rpy()) {
    if (!this->cur_angle_rpy().IsInitialized())
      return false;
  }
  if (has_avr_angle_rpy()) {
    if (!this->avr_angle_rpy().IsInitialized())
      return false;
  }
  if (has_cur_angle_unit_vector()) {
    if (!this->cur_angle_unit_vector().IsInitialized())
      return false;
  }
  if (has_avr_angle_unit_vector()) {
    if (!this->avr_angle_unit_vector().IsInitialized())
      return false;
  }
  return true;
}

void FaceDirection::Swap(FaceDirection *other) {
  if (other != this) {
    std::swap(face_dir_, other->face_dir_);
    std::swap(cur_angle_rpy_, other->cur_angle_rpy_);
    std::swap(avr_angle_rpy_, other->avr_angle_rpy_);
    std::swap(cur_angle_unit_vector_, other->cur_angle_unit_vector_);
    std::swap(avr_angle_unit_vector_, other->avr_angle_unit_vector_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FaceDirection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceDirection_descriptor_;
  metadata.reflection = FaceDirection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventResult::kEventFieldNumber;
#endif  // !_MSC_VER

EventResult::EventResult() : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSOutputProtocol.EventResult)
}

void EventResult::InitAsDefaultInstance() {}

EventResult::EventResult(const EventResult &from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSOutputProtocol.EventResult)
}

void EventResult::SharedCtor() {
  _cached_size_ = 0;
  event_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventResult::~EventResult() {
  // @@protoc_insertion_point(destructor:DMSOutputProtocol.EventResult)
  SharedDtor();
}

void EventResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor *EventResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventResult_descriptor_;
}

const EventResult &EventResult::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_DMSSDKOutput_2eproto();
  return *default_instance_;
}

EventResult *EventResult::default_instance_ = NULL;

EventResult *EventResult::New() const { return new EventResult; }

void EventResult::Clear() {
  event_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION))    \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSOutputProtocol.EventResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DMSOutputProtocol.EventEnum event = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          if (::DMSOutputProtocol::EventEnum_IsValid(value)) {
            set_event(static_cast< ::DMSOutputProtocol::EventEnum>(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSOutputProtocol.EventResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSOutputProtocol.EventResult)
  return false;
#undef DO_
}

void EventResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:DMSOutputProtocol.EventResult)
  // required .DMSOutputProtocol.EventEnum event = 1;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(1, this->event(),
                                                            output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSOutputProtocol.EventResult)
}

::google::protobuf::uint8 *EventResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSOutputProtocol.EventResult)
  // required .DMSOutputProtocol.EventEnum event = 1;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        1, this->event(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSOutputProtocol.EventResult)
  return target;
}

int EventResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DMSOutputProtocol.EventEnum event = 1;
    if (has_event()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                            this->event());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventResult::MergeFrom(const ::google::protobuf::Message &from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventResult *source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const EventResult *>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventResult::MergeFrom(const EventResult &from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event()) {
      set_event(from.event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventResult::CopyFrom(const ::google::protobuf::Message &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void EventResult::CopyFrom(const EventResult &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool EventResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001)
    return false;

  return true;
}

void EventResult::Swap(EventResult *other) {
  if (other != this) {
    std::swap(event_, other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventResult_descriptor_;
  metadata.reflection = EventResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DAAResult::kDaaEventFieldNumber;
#endif  // !_MSC_VER

DAAResult::DAAResult() : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSOutputProtocol.DAAResult)
}

void DAAResult::InitAsDefaultInstance() {}

DAAResult::DAAResult(const DAAResult &from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSOutputProtocol.DAAResult)
}

void DAAResult::SharedCtor() {
  _cached_size_ = 0;
  daa_event_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DAAResult::~DAAResult() {
  // @@protoc_insertion_point(destructor:DMSOutputProtocol.DAAResult)
  SharedDtor();
}

void DAAResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DAAResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor *DAAResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DAAResult_descriptor_;
}

const DAAResult &DAAResult::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_DMSSDKOutput_2eproto();
  return *default_instance_;
}

DAAResult *DAAResult::default_instance_ = NULL;

DAAResult *DAAResult::New() const { return new DAAResult; }

void DAAResult::Clear() {
  daa_event_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DAAResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION))    \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSOutputProtocol.DAAResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DMSOutputProtocol.EventEnum daa_event = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          if (::DMSOutputProtocol::EventEnum_IsValid(value)) {
            set_daa_event(static_cast< ::DMSOutputProtocol::EventEnum>(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSOutputProtocol.DAAResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSOutputProtocol.DAAResult)
  return false;
#undef DO_
}

void DAAResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:DMSOutputProtocol.DAAResult)
  // required .DMSOutputProtocol.EventEnum daa_event = 1;
  if (has_daa_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
        1, this->daa_event(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSOutputProtocol.DAAResult)
}

::google::protobuf::uint8 *DAAResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSOutputProtocol.DAAResult)
  // required .DMSOutputProtocol.EventEnum daa_event = 1;
  if (has_daa_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        1, this->daa_event(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSOutputProtocol.DAAResult)
  return target;
}

int DAAResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DMSOutputProtocol.EventEnum daa_event = 1;
    if (has_daa_event()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                            this->daa_event());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DAAResult::MergeFrom(const ::google::protobuf::Message &from) {
  GOOGLE_CHECK_NE(&from, this);
  const DAAResult *source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const DAAResult *>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DAAResult::MergeFrom(const DAAResult &from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_daa_event()) {
      set_daa_event(from.daa_event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DAAResult::CopyFrom(const ::google::protobuf::Message &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void DAAResult::CopyFrom(const DAAResult &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool DAAResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001)
    return false;

  return true;
}

void DAAResult::Swap(DAAResult *other) {
  if (other != this) {
    std::swap(daa_event_, other->daa_event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DAAResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DAAResult_descriptor_;
  metadata.reflection = DAAResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StateResult::kStateFieldNumber;
#endif  // !_MSC_VER

StateResult::StateResult() : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSOutputProtocol.StateResult)
}

void StateResult::InitAsDefaultInstance() {}

StateResult::StateResult(const StateResult &from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSOutputProtocol.StateResult)
}

void StateResult::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateResult::~StateResult() {
  // @@protoc_insertion_point(destructor:DMSOutputProtocol.StateResult)
  SharedDtor();
}

void StateResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor *StateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateResult_descriptor_;
}

const StateResult &StateResult::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_DMSSDKOutput_2eproto();
  return *default_instance_;
}

StateResult *StateResult::default_instance_ = NULL;

StateResult *StateResult::New() const { return new StateResult; }

void StateResult::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION))    \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSOutputProtocol.StateResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DMSOutputProtocol.StateEnum state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          if (::DMSOutputProtocol::StateEnum_IsValid(value)) {
            set_state(static_cast< ::DMSOutputProtocol::StateEnum>(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSOutputProtocol.StateResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSOutputProtocol.StateResult)
  return false;
#undef DO_
}

void StateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:DMSOutputProtocol.StateResult)
  // required .DMSOutputProtocol.StateEnum state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(1, this->state(),
                                                            output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSOutputProtocol.StateResult)
}

::google::protobuf::uint8 *StateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSOutputProtocol.StateResult)
  // required .DMSOutputProtocol.StateEnum state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSOutputProtocol.StateResult)
  return target;
}

int StateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DMSOutputProtocol.StateEnum state = 1;
    if (has_state()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                            this->state());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateResult::MergeFrom(const ::google::protobuf::Message &from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateResult *source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const StateResult *>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateResult::MergeFrom(const StateResult &from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateResult::CopyFrom(const ::google::protobuf::Message &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void StateResult::CopyFrom(const StateResult &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool StateResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001)
    return false;

  return true;
}

void StateResult::Swap(StateResult *other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateResult_descriptor_;
  metadata.reflection = StateResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LDMK::kFaceFeaturePointsFieldNumber;
#endif  // !_MSC_VER

LDMK::LDMK() : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSOutputProtocol.LDMK)
}

void LDMK::InitAsDefaultInstance() {}

LDMK::LDMK(const LDMK &from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSOutputProtocol.LDMK)
}

void LDMK::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LDMK::~LDMK() {
  // @@protoc_insertion_point(destructor:DMSOutputProtocol.LDMK)
  SharedDtor();
}

void LDMK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LDMK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor *LDMK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LDMK_descriptor_;
}

const LDMK &LDMK::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_DMSSDKOutput_2eproto();
  return *default_instance_;
}

LDMK *LDMK::default_instance_ = NULL;

LDMK *LDMK::New() const { return new LDMK; }

void LDMK::Clear() {
  face_feature_points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LDMK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION))    \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSOutputProtocol.LDMK)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DMSOutputProtocol.Point face_feature_points = 1;
      case 1: {
        if (tag == 10) {
        parse_face_feature_points:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, add_face_feature_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10))
          goto parse_face_feature_points;
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSOutputProtocol.LDMK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSOutputProtocol.LDMK)
  return false;
#undef DO_
}

void LDMK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:DMSOutputProtocol.LDMK)
  // repeated .DMSOutputProtocol.Point face_feature_points = 1;
  for (int i = 0; i < this->face_feature_points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->face_feature_points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSOutputProtocol.LDMK)
}

::google::protobuf::uint8 *LDMK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSOutputProtocol.LDMK)
  // repeated .DMSOutputProtocol.Point face_feature_points = 1;
  for (int i = 0; i < this->face_feature_points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(1, this->face_feature_points(i), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSOutputProtocol.LDMK)
  return target;
}

int LDMK::ByteSize() const {
  int total_size = 0;

  // repeated .DMSOutputProtocol.Point face_feature_points = 1;
  total_size += 1 * this->face_feature_points_size();
  for (int i = 0; i < this->face_feature_points_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->face_feature_points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LDMK::MergeFrom(const ::google::protobuf::Message &from) {
  GOOGLE_CHECK_NE(&from, this);
  const LDMK *source =
      ::google::protobuf::internal::dynamic_cast_if_available<const LDMK *>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LDMK::MergeFrom(const LDMK &from) {
  GOOGLE_CHECK_NE(&from, this);
  face_feature_points_.MergeFrom(from.face_feature_points_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LDMK::CopyFrom(const ::google::protobuf::Message &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void LDMK::CopyFrom(const LDMK &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool LDMK::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(
          this->face_feature_points()))
    return false;
  return true;
}

void LDMK::Swap(LDMK *other) {
  if (other != this) {
    face_feature_points_.Swap(&other->face_feature_points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LDMK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LDMK_descriptor_;
  metadata.reflection = LDMK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EyeResult::kLeftFieldNumber;
const int EyeResult::kRightFieldNumber;
const int EyeResult::kLeftRoiFieldNumber;
const int EyeResult::kRightRoiFieldNumber;
const int EyeResult::kScoreFieldNumber;
#endif  // !_MSC_VER

EyeResult::EyeResult() : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSOutputProtocol.EyeResult)
}

void EyeResult::InitAsDefaultInstance() {
  left_roi_ = const_cast< ::DMSOutputProtocol::Rect *>(
      &::DMSOutputProtocol::Rect::default_instance());
  right_roi_ = const_cast< ::DMSOutputProtocol::Rect *>(
      &::DMSOutputProtocol::Rect::default_instance());
  score_ = const_cast< ::DMSOutputProtocol::EyeScore *>(
      &::DMSOutputProtocol::EyeScore::default_instance());
}

EyeResult::EyeResult(const EyeResult &from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSOutputProtocol.EyeResult)
}

void EyeResult::SharedCtor() {
  _cached_size_ = 0;
  left_ = 0;
  right_ = 0;
  left_roi_ = NULL;
  right_roi_ = NULL;
  score_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EyeResult::~EyeResult() {
  // @@protoc_insertion_point(destructor:DMSOutputProtocol.EyeResult)
  SharedDtor();
}

void EyeResult::SharedDtor() {
  if (this != default_instance_) {
    delete left_roi_;
    delete right_roi_;
    delete score_;
  }
}

void EyeResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor *EyeResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EyeResult_descriptor_;
}

const EyeResult &EyeResult::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_DMSSDKOutput_2eproto();
  return *default_instance_;
}

EyeResult *EyeResult::default_instance_ = NULL;

EyeResult *EyeResult::New() const { return new EyeResult; }

void EyeResult::Clear() {
#define OFFSET_OF_FIELD_(f)                                          \
  (reinterpret_cast<char *>(&reinterpret_cast<EyeResult *>(16)->f) - \
   reinterpret_cast<char *>(16))

#define ZR_(first, last)                                  \
  do {                                                    \
    size_t f = OFFSET_OF_FIELD_(first);                   \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last); \
    ::memset(&first, 0, n);                               \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(left_, right_);
    if (has_left_roi()) {
      if (left_roi_ != NULL)
        left_roi_->::DMSOutputProtocol::Rect::Clear();
    }
    if (has_right_roi()) {
      if (right_roi_ != NULL)
        right_roi_->::DMSOutputProtocol::Rect::Clear();
    }
    if (has_score()) {
      if (score_ != NULL)
        score_->::DMSOutputProtocol::EyeScore::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EyeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION))    \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSOutputProtocol.EyeResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DMSOutputProtocol.EyeState left = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          if (::DMSOutputProtocol::EyeState_IsValid(value)) {
            set_left(static_cast< ::DMSOutputProtocol::EyeState>(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16))
          goto parse_right;
        break;
      }

      // required .DMSOutputProtocol.EyeState right = 2;
      case 2: {
        if (tag == 16) {
        parse_right:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          if (::DMSOutputProtocol::EyeState_IsValid(value)) {
            set_right(static_cast< ::DMSOutputProtocol::EyeState>(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26))
          goto parse_left_roi;
        break;
      }

      // required .DMSOutputProtocol.Rect left_roi = 3;
      case 3: {
        if (tag == 26) {
        parse_left_roi:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_left_roi()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34))
          goto parse_right_roi;
        break;
      }

      // required .DMSOutputProtocol.Rect right_roi = 4;
      case 4: {
        if (tag == 34) {
        parse_right_roi:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_right_roi()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42))
          goto parse_score;
        break;
      }

      // optional .DMSOutputProtocol.EyeScore score = 5;
      case 5: {
        if (tag == 42) {
        parse_score:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_score()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSOutputProtocol.EyeResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSOutputProtocol.EyeResult)
  return false;
#undef DO_
}

void EyeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:DMSOutputProtocol.EyeResult)
  // required .DMSOutputProtocol.EyeState left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(1, this->left(),
                                                            output);
  }

  // required .DMSOutputProtocol.EyeState right = 2;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(2, this->right(),
                                                            output);
  }

  // required .DMSOutputProtocol.Rect left_roi = 3;
  if (has_left_roi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->left_roi(), output);
  }

  // required .DMSOutputProtocol.Rect right_roi = 4;
  if (has_right_roi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->right_roi(), output);
  }

  // optional .DMSOutputProtocol.EyeScore score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSOutputProtocol.EyeResult)
}

::google::protobuf::uint8 *EyeResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSOutputProtocol.EyeResult)
  // required .DMSOutputProtocol.EyeState left = 1;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        1, this->left(), target);
  }

  // required .DMSOutputProtocol.EyeState right = 2;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        2, this->right(), target);
  }

  // required .DMSOutputProtocol.Rect left_roi = 3;
  if (has_left_roi()) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(3, this->left_roi(), target);
  }

  // required .DMSOutputProtocol.Rect right_roi = 4;
  if (has_right_roi()) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(4, this->right_roi(), target);
  }

  // optional .DMSOutputProtocol.EyeScore score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(5, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSOutputProtocol.EyeResult)
  return target;
}

int EyeResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DMSOutputProtocol.EyeState left = 1;
    if (has_left()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                            this->left());
    }

    // required .DMSOutputProtocol.EyeState right = 2;
    if (has_right()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                            this->right());
    }

    // required .DMSOutputProtocol.Rect left_roi = 3;
    if (has_left_roi()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
              this->left_roi());
    }

    // required .DMSOutputProtocol.Rect right_roi = 4;
    if (has_right_roi()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
              this->right_roi());
    }

    // optional .DMSOutputProtocol.EyeScore score = 5;
    if (has_score()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
              this->score());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EyeResult::MergeFrom(const ::google::protobuf::Message &from) {
  GOOGLE_CHECK_NE(&from, this);
  const EyeResult *source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const EyeResult *>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EyeResult::MergeFrom(const EyeResult &from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_left_roi()) {
      mutable_left_roi()->::DMSOutputProtocol::Rect::MergeFrom(from.left_roi());
    }
    if (from.has_right_roi()) {
      mutable_right_roi()->::DMSOutputProtocol::Rect::MergeFrom(
          from.right_roi());
    }
    if (from.has_score()) {
      mutable_score()->::DMSOutputProtocol::EyeScore::MergeFrom(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EyeResult::CopyFrom(const ::google::protobuf::Message &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void EyeResult::CopyFrom(const EyeResult &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool EyeResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f)
    return false;

  if (has_left_roi()) {
    if (!this->left_roi().IsInitialized())
      return false;
  }
  if (has_right_roi()) {
    if (!this->right_roi().IsInitialized())
      return false;
  }
  if (has_score()) {
    if (!this->score().IsInitialized())
      return false;
  }
  return true;
}

void EyeResult::Swap(EyeResult *other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(left_roi_, other->left_roi_);
    std::swap(right_roi_, other->right_roi_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EyeResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EyeResult_descriptor_;
  metadata.reflection = EyeResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SmokeResult::kSmokeStateFieldNumber;
const int SmokeResult::kSmokeRoiFieldNumber;
const int SmokeResult::kScoreFieldNumber;
#endif  // !_MSC_VER

SmokeResult::SmokeResult() : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSOutputProtocol.SmokeResult)
}

void SmokeResult::InitAsDefaultInstance() {
  smoke_roi_ = const_cast< ::DMSOutputProtocol::Rect *>(
      &::DMSOutputProtocol::Rect::default_instance());
  score_ = const_cast< ::DMSOutputProtocol::SmokeScore *>(
      &::DMSOutputProtocol::SmokeScore::default_instance());
}

SmokeResult::SmokeResult(const SmokeResult &from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSOutputProtocol.SmokeResult)
}

void SmokeResult::SharedCtor() {
  _cached_size_ = 0;
  smoke_state_ = 0;
  smoke_roi_ = NULL;
  score_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmokeResult::~SmokeResult() {
  // @@protoc_insertion_point(destructor:DMSOutputProtocol.SmokeResult)
  SharedDtor();
}

void SmokeResult::SharedDtor() {
  if (this != default_instance_) {
    delete smoke_roi_;
    delete score_;
  }
}

void SmokeResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor *SmokeResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmokeResult_descriptor_;
}

const SmokeResult &SmokeResult::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_DMSSDKOutput_2eproto();
  return *default_instance_;
}

SmokeResult *SmokeResult::default_instance_ = NULL;

SmokeResult *SmokeResult::New() const { return new SmokeResult; }

void SmokeResult::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    smoke_state_ = 0;
    if (has_smoke_roi()) {
      if (smoke_roi_ != NULL)
        smoke_roi_->::DMSOutputProtocol::Rect::Clear();
    }
    if (has_score()) {
      if (score_ != NULL)
        score_->::DMSOutputProtocol::SmokeScore::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmokeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION))    \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSOutputProtocol.SmokeResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DMSOutputProtocol.SmokeState smoke_state = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          if (::DMSOutputProtocol::SmokeState_IsValid(value)) {
            set_smoke_state(
                static_cast< ::DMSOutputProtocol::SmokeState>(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18))
          goto parse_smoke_roi;
        break;
      }

      // required .DMSOutputProtocol.Rect smoke_roi = 2;
      case 2: {
        if (tag == 18) {
        parse_smoke_roi:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_smoke_roi()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26))
          goto parse_score;
        break;
      }

      // optional .DMSOutputProtocol.SmokeScore score = 3;
      case 3: {
        if (tag == 26) {
        parse_score:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_score()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSOutputProtocol.SmokeResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSOutputProtocol.SmokeResult)
  return false;
#undef DO_
}

void SmokeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:DMSOutputProtocol.SmokeResult)
  // required .DMSOutputProtocol.SmokeState smoke_state = 1;
  if (has_smoke_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
        1, this->smoke_state(), output);
  }

  // required .DMSOutputProtocol.Rect smoke_roi = 2;
  if (has_smoke_roi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->smoke_roi(), output);
  }

  // optional .DMSOutputProtocol.SmokeScore score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSOutputProtocol.SmokeResult)
}

::google::protobuf::uint8 *SmokeResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSOutputProtocol.SmokeResult)
  // required .DMSOutputProtocol.SmokeState smoke_state = 1;
  if (has_smoke_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        1, this->smoke_state(), target);
  }

  // required .DMSOutputProtocol.Rect smoke_roi = 2;
  if (has_smoke_roi()) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(2, this->smoke_roi(), target);
  }

  // optional .DMSOutputProtocol.SmokeScore score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(3, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSOutputProtocol.SmokeResult)
  return target;
}

int SmokeResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DMSOutputProtocol.SmokeState smoke_state = 1;
    if (has_smoke_state()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                            this->smoke_state());
    }

    // required .DMSOutputProtocol.Rect smoke_roi = 2;
    if (has_smoke_roi()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
              this->smoke_roi());
    }

    // optional .DMSOutputProtocol.SmokeScore score = 3;
    if (has_score()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
              this->score());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmokeResult::MergeFrom(const ::google::protobuf::Message &from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmokeResult *source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const SmokeResult *>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmokeResult::MergeFrom(const SmokeResult &from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_smoke_state()) {
      set_smoke_state(from.smoke_state());
    }
    if (from.has_smoke_roi()) {
      mutable_smoke_roi()->::DMSOutputProtocol::Rect::MergeFrom(
          from.smoke_roi());
    }
    if (from.has_score()) {
      mutable_score()->::DMSOutputProtocol::SmokeScore::MergeFrom(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmokeResult::CopyFrom(const ::google::protobuf::Message &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void SmokeResult::CopyFrom(const SmokeResult &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool SmokeResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003)
    return false;

  if (has_smoke_roi()) {
    if (!this->smoke_roi().IsInitialized())
      return false;
  }
  if (has_score()) {
    if (!this->score().IsInitialized())
      return false;
  }
  return true;
}

void SmokeResult::Swap(SmokeResult *other) {
  if (other != this) {
    std::swap(smoke_state_, other->smoke_state_);
    std::swap(smoke_roi_, other->smoke_roi_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmokeResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmokeResult_descriptor_;
  metadata.reflection = SmokeResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FaceROI::kFaceRoiFieldNumber;
const int FaceROI::kConfFieldNumber;
#endif  // !_MSC_VER

FaceROI::FaceROI() : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSOutputProtocol.FaceROI)
}

void FaceROI::InitAsDefaultInstance() {
  face_roi_ = const_cast< ::DMSOutputProtocol::Rect *>(
      &::DMSOutputProtocol::Rect::default_instance());
}

FaceROI::FaceROI(const FaceROI &from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSOutputProtocol.FaceROI)
}

void FaceROI::SharedCtor() {
  _cached_size_ = 0;
  face_roi_ = NULL;
  conf_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaceROI::~FaceROI() {
  // @@protoc_insertion_point(destructor:DMSOutputProtocol.FaceROI)
  SharedDtor();
}

void FaceROI::SharedDtor() {
  if (this != default_instance_) {
    delete face_roi_;
  }
}

void FaceROI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor *FaceROI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceROI_descriptor_;
}

const FaceROI &FaceROI::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_DMSSDKOutput_2eproto();
  return *default_instance_;
}

FaceROI *FaceROI::default_instance_ = NULL;

FaceROI *FaceROI::New() const { return new FaceROI; }

void FaceROI::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_face_roi()) {
      if (face_roi_ != NULL)
        face_roi_->::DMSOutputProtocol::Rect::Clear();
    }
    conf_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaceROI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION))    \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSOutputProtocol.FaceROI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DMSOutputProtocol.Rect face_roi = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_face_roi()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21))
          goto parse_conf;
        break;
      }

      // optional float conf = 2;
      case 2: {
        if (tag == 21) {
        parse_conf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
              input, &conf_)));
          set_has_conf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSOutputProtocol.FaceROI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSOutputProtocol.FaceROI)
  return false;
#undef DO_
}

void FaceROI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:DMSOutputProtocol.FaceROI)
  // required .DMSOutputProtocol.Rect face_roi = 1;
  if (has_face_roi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->face_roi(), output);
  }

  // optional float conf = 2;
  if (has_conf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->conf(),
                                                             output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSOutputProtocol.FaceROI)
}

::google::protobuf::uint8 *FaceROI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSOutputProtocol.FaceROI)
  // required .DMSOutputProtocol.Rect face_roi = 1;
  if (has_face_roi()) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(1, this->face_roi(), target);
  }

  // optional float conf = 2;
  if (has_conf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(
        2, this->conf(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSOutputProtocol.FaceROI)
  return target;
}

int FaceROI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DMSOutputProtocol.Rect face_roi = 1;
    if (has_face_roi()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
              this->face_roi());
    }

    // optional float conf = 2;
    if (has_conf()) {
      total_size += 1 + 4;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceROI::MergeFrom(const ::google::protobuf::Message &from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaceROI *source =
      ::google::protobuf::internal::dynamic_cast_if_available<const FaceROI *>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaceROI::MergeFrom(const FaceROI &from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_face_roi()) {
      mutable_face_roi()->::DMSOutputProtocol::Rect::MergeFrom(from.face_roi());
    }
    if (from.has_conf()) {
      set_conf(from.conf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaceROI::CopyFrom(const ::google::protobuf::Message &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void FaceROI::CopyFrom(const FaceROI &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool FaceROI::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001)
    return false;

  if (has_face_roi()) {
    if (!this->face_roi().IsInitialized())
      return false;
  }
  return true;
}

void FaceROI::Swap(FaceROI *other) {
  if (other != this) {
    std::swap(face_roi_, other->face_roi_);
    std::swap(conf_, other->conf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FaceROI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceROI_descriptor_;
  metadata.reflection = FaceROI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FaceInfo::kTypeFieldNumber;
const int FaceInfo::kFaceRoiFieldNumber;
const int FaceInfo::kLdmkFieldNumber;
const int FaceInfo::kTrackingIdFieldNumber;
const int FaceInfo::kFaceDirectionFieldNumber;
#endif  // !_MSC_VER

FaceInfo::FaceInfo() : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSOutputProtocol.FaceInfo)
}

void FaceInfo::InitAsDefaultInstance() {
  face_roi_ = const_cast< ::DMSOutputProtocol::FaceROI *>(
      &::DMSOutputProtocol::FaceROI::default_instance());
  ldmk_ = const_cast< ::DMSOutputProtocol::LDMK *>(
      &::DMSOutputProtocol::LDMK::default_instance());
  face_direction_ = const_cast< ::DMSOutputProtocol::FaceDirection *>(
      &::DMSOutputProtocol::FaceDirection::default_instance());
}

FaceInfo::FaceInfo(const FaceInfo &from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSOutputProtocol.FaceInfo)
}

void FaceInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  face_roi_ = NULL;
  ldmk_ = NULL;
  tracking_id_ = 0;
  face_direction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaceInfo::~FaceInfo() {
  // @@protoc_insertion_point(destructor:DMSOutputProtocol.FaceInfo)
  SharedDtor();
}

void FaceInfo::SharedDtor() {
  if (this != default_instance_) {
    delete face_roi_;
    delete ldmk_;
    delete face_direction_;
  }
}

void FaceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor *FaceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaceInfo_descriptor_;
}

const FaceInfo &FaceInfo::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_DMSSDKOutput_2eproto();
  return *default_instance_;
}

FaceInfo *FaceInfo::default_instance_ = NULL;

FaceInfo *FaceInfo::New() const { return new FaceInfo; }

void FaceInfo::Clear() {
#define OFFSET_OF_FIELD_(f)                                         \
  (reinterpret_cast<char *>(&reinterpret_cast<FaceInfo *>(16)->f) - \
   reinterpret_cast<char *>(16))

#define ZR_(first, last)                                  \
  do {                                                    \
    size_t f = OFFSET_OF_FIELD_(first);                   \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last); \
    ::memset(&first, 0, n);                               \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(type_, tracking_id_);
    if (has_face_roi()) {
      if (face_roi_ != NULL)
        face_roi_->::DMSOutputProtocol::FaceROI::Clear();
    }
    if (has_ldmk()) {
      if (ldmk_ != NULL)
        ldmk_->::DMSOutputProtocol::LDMK::Clear();
    }
    if (has_face_direction()) {
      if (face_direction_ != NULL)
        face_direction_->::DMSOutputProtocol::FaceDirection::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION))    \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSOutputProtocol.FaceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DMSOutputProtocol.PersonType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          if (::DMSOutputProtocol::PersonType_IsValid(value)) {
            set_type(static_cast< ::DMSOutputProtocol::PersonType>(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18))
          goto parse_face_roi;
        break;
      }

      // required .DMSOutputProtocol.FaceROI face_roi = 2;
      case 2: {
        if (tag == 18) {
        parse_face_roi:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_face_roi()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26))
          goto parse_ldmk;
        break;
      }

      // optional .DMSOutputProtocol.LDMK ldmk = 3;
      case 3: {
        if (tag == 26) {
        parse_ldmk:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_ldmk()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40))
          goto parse_tracking_id;
        break;
      }

      // optional int32 tracking_id = 5;
      case 5: {
        if (tag == 40) {
        parse_tracking_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &tracking_id_)));
          set_has_tracking_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82))
          goto parse_face_direction;
        break;
      }

      // optional .DMSOutputProtocol.FaceDirection face_direction = 10;
      case 10: {
        if (tag == 82) {
        parse_face_direction:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_face_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSOutputProtocol.FaceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSOutputProtocol.FaceInfo)
  return false;
#undef DO_
}

void FaceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:DMSOutputProtocol.FaceInfo)
  // required .DMSOutputProtocol.PersonType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(1, this->type(),
                                                            output);
  }

  // required .DMSOutputProtocol.FaceROI face_roi = 2;
  if (has_face_roi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->face_roi(), output);
  }

  // optional .DMSOutputProtocol.LDMK ldmk = 3;
  if (has_ldmk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->ldmk(), output);
  }

  // optional int32 tracking_id = 5;
  if (has_tracking_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        5, this->tracking_id(), output);
  }

  // optional .DMSOutputProtocol.FaceDirection face_direction = 10;
  if (has_face_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, this->face_direction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSOutputProtocol.FaceInfo)
}

::google::protobuf::uint8 *FaceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSOutputProtocol.FaceInfo)
  // required .DMSOutputProtocol.PersonType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        1, this->type(), target);
  }

  // required .DMSOutputProtocol.FaceROI face_roi = 2;
  if (has_face_roi()) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(2, this->face_roi(), target);
  }

  // optional .DMSOutputProtocol.LDMK ldmk = 3;
  if (has_ldmk()) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(3, this->ldmk(), target);
  }

  // optional int32 tracking_id = 5;
  if (has_tracking_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        5, this->tracking_id(), target);
  }

  // optional .DMSOutputProtocol.FaceDirection face_direction = 10;
  if (has_face_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(10, this->face_direction(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSOutputProtocol.FaceInfo)
  return target;
}

int FaceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DMSOutputProtocol.PersonType type = 1;
    if (has_type()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                            this->type());
    }

    // required .DMSOutputProtocol.FaceROI face_roi = 2;
    if (has_face_roi()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
              this->face_roi());
    }

    // optional .DMSOutputProtocol.LDMK ldmk = 3;
    if (has_ldmk()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
              this->ldmk());
    }

    // optional int32 tracking_id = 5;
    if (has_tracking_id()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->tracking_id());
    }

    // optional .DMSOutputProtocol.FaceDirection face_direction = 10;
    if (has_face_direction()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
              this->face_direction());
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaceInfo::MergeFrom(const ::google::protobuf::Message &from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaceInfo *source =
      ::google::protobuf::internal::dynamic_cast_if_available<const FaceInfo *>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaceInfo::MergeFrom(const FaceInfo &from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_face_roi()) {
      mutable_face_roi()->::DMSOutputProtocol::FaceROI::MergeFrom(
          from.face_roi());
    }
    if (from.has_ldmk()) {
      mutable_ldmk()->::DMSOutputProtocol::LDMK::MergeFrom(from.ldmk());
    }
    if (from.has_tracking_id()) {
      set_tracking_id(from.tracking_id());
    }
    if (from.has_face_direction()) {
      mutable_face_direction()->::DMSOutputProtocol::FaceDirection::MergeFrom(
          from.face_direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaceInfo::CopyFrom(const ::google::protobuf::Message &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void FaceInfo::CopyFrom(const FaceInfo &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool FaceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003)
    return false;

  if (has_face_roi()) {
    if (!this->face_roi().IsInitialized())
      return false;
  }
  if (has_ldmk()) {
    if (!this->ldmk().IsInitialized())
      return false;
  }
  if (has_face_direction()) {
    if (!this->face_direction().IsInitialized())
      return false;
  }
  return true;
}

void FaceInfo::Swap(FaceInfo *other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(face_roi_, other->face_roi_);
    std::swap(ldmk_, other->ldmk_);
    std::swap(tracking_id_, other->tracking_id_);
    std::swap(face_direction_, other->face_direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FaceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FaceInfo_descriptor_;
  metadata.reflection = FaceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PersonInfo::kFaceInfoFieldNumber;
const int PersonInfo::kFaceFeatureFieldNumber;
const int PersonInfo::kEyeResultFieldNumber;
const int PersonInfo::kSmokeResultFieldNumber;
const int PersonInfo::kEventResultFieldNumber;
const int PersonInfo::kStateTriggerFieldNumber;
#endif  // !_MSC_VER

PersonInfo::PersonInfo() : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSOutputProtocol.PersonInfo)
}

void PersonInfo::InitAsDefaultInstance() {
  face_info_ = const_cast< ::DMSOutputProtocol::FaceInfo *>(
      &::DMSOutputProtocol::FaceInfo::default_instance());
  eye_result_ = const_cast< ::DMSOutputProtocol::EyeResult *>(
      &::DMSOutputProtocol::EyeResult::default_instance());
  smoke_result_ = const_cast< ::DMSOutputProtocol::SmokeResult *>(
      &::DMSOutputProtocol::SmokeResult::default_instance());
  state_trigger_ = const_cast< ::DMSOutputProtocol::StateTrigger *>(
      &::DMSOutputProtocol::StateTrigger::default_instance());
}

PersonInfo::PersonInfo(const PersonInfo &from) : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSOutputProtocol.PersonInfo)
}

void PersonInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  face_info_ = NULL;
  face_feature_ = const_cast< ::std::string *>(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eye_result_ = NULL;
  smoke_result_ = NULL;
  state_trigger_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PersonInfo::~PersonInfo() {
  // @@protoc_insertion_point(destructor:DMSOutputProtocol.PersonInfo)
  SharedDtor();
}

void PersonInfo::SharedDtor() {
  if (face_feature_ !=
      &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete face_feature_;
  }
  if (this != default_instance_) {
    delete face_info_;
    delete eye_result_;
    delete smoke_result_;
    delete state_trigger_;
  }
}

void PersonInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor *PersonInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PersonInfo_descriptor_;
}

const PersonInfo &PersonInfo::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_DMSSDKOutput_2eproto();
  return *default_instance_;
}

PersonInfo *PersonInfo::default_instance_ = NULL;

PersonInfo *PersonInfo::New() const { return new PersonInfo; }

void PersonInfo::Clear() {
  if (_has_bits_[0 / 32] & 47) {
    if (has_face_info()) {
      if (face_info_ != NULL)
        face_info_->::DMSOutputProtocol::FaceInfo::Clear();
    }
    if (has_face_feature()) {
      if (face_feature_ !=
          &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        face_feature_->clear();
      }
    }
    if (has_eye_result()) {
      if (eye_result_ != NULL)
        eye_result_->::DMSOutputProtocol::EyeResult::Clear();
    }
    if (has_smoke_result()) {
      if (smoke_result_ != NULL)
        smoke_result_->::DMSOutputProtocol::SmokeResult::Clear();
    }
    if (has_state_trigger()) {
      if (state_trigger_ != NULL)
        state_trigger_->::DMSOutputProtocol::StateTrigger::Clear();
    }
  }
  event_result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PersonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION))    \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSOutputProtocol.PersonInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DMSOutputProtocol.FaceInfo face_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_face_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18))
          goto parse_face_feature;
        break;
      }

      // optional bytes face_feature = 2;
      case 2: {
        if (tag == 18) {
        parse_face_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
              input, this->mutable_face_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26))
          goto parse_eye_result;
        break;
      }

      // optional .DMSOutputProtocol.EyeResult eye_result = 3;
      case 3: {
        if (tag == 26) {
        parse_eye_result:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_eye_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34))
          goto parse_smoke_result;
        break;
      }

      // optional .DMSOutputProtocol.SmokeResult smoke_result = 4;
      case 4: {
        if (tag == 34) {
        parse_smoke_result:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_smoke_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50))
          goto parse_event_result;
        break;
      }

      // repeated .DMSOutputProtocol.EventResult event_result = 6;
      case 6: {
        if (tag == 50) {
        parse_event_result:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, add_event_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50))
          goto parse_event_result;
        if (input->ExpectTag(58))
          goto parse_state_trigger;
        break;
      }

      // optional .DMSOutputProtocol.StateTrigger state_trigger = 7;
      case 7: {
        if (tag == 58) {
        parse_state_trigger:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_state_trigger()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSOutputProtocol.PersonInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSOutputProtocol.PersonInfo)
  return false;
#undef DO_
}

void PersonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:DMSOutputProtocol.PersonInfo)
  // required .DMSOutputProtocol.FaceInfo face_info = 1;
  if (has_face_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->face_info(), output);
  }

  // optional bytes face_feature = 2;
  if (has_face_feature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
        2, this->face_feature(), output);
  }

  // optional .DMSOutputProtocol.EyeResult eye_result = 3;
  if (has_eye_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->eye_result(), output);
  }

  // optional .DMSOutputProtocol.SmokeResult smoke_result = 4;
  if (has_smoke_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->smoke_result(), output);
  }

  // repeated .DMSOutputProtocol.EventResult event_result = 6;
  for (int i = 0; i < this->event_result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, this->event_result(i), output);
  }

  // optional .DMSOutputProtocol.StateTrigger state_trigger = 7;
  if (has_state_trigger()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, this->state_trigger(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSOutputProtocol.PersonInfo)
}

::google::protobuf::uint8 *PersonInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSOutputProtocol.PersonInfo)
  // required .DMSOutputProtocol.FaceInfo face_info = 1;
  if (has_face_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(1, this->face_info(), target);
  }

  // optional bytes face_feature = 2;
  if (has_face_feature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->face_feature(), target);
  }

  // optional .DMSOutputProtocol.EyeResult eye_result = 3;
  if (has_eye_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(3, this->eye_result(), target);
  }

  // optional .DMSOutputProtocol.SmokeResult smoke_result = 4;
  if (has_smoke_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(4, this->smoke_result(), target);
  }

  // repeated .DMSOutputProtocol.EventResult event_result = 6;
  for (int i = 0; i < this->event_result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(6, this->event_result(i), target);
  }

  // optional .DMSOutputProtocol.StateTrigger state_trigger = 7;
  if (has_state_trigger()) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(7, this->state_trigger(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSOutputProtocol.PersonInfo)
  return target;
}

int PersonInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DMSOutputProtocol.FaceInfo face_info = 1;
    if (has_face_info()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
              this->face_info());
    }

    // optional bytes face_feature = 2;
    if (has_face_feature()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                            this->face_feature());
    }

    // optional .DMSOutputProtocol.EyeResult eye_result = 3;
    if (has_eye_result()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
              this->eye_result());
    }

    // optional .DMSOutputProtocol.SmokeResult smoke_result = 4;
    if (has_smoke_result()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
              this->smoke_result());
    }

    // optional .DMSOutputProtocol.StateTrigger state_trigger = 7;
    if (has_state_trigger()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
              this->state_trigger());
    }
  }
  // repeated .DMSOutputProtocol.EventResult event_result = 6;
  total_size += 1 * this->event_result_size();
  for (int i = 0; i < this->event_result_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->event_result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PersonInfo::MergeFrom(const ::google::protobuf::Message &from) {
  GOOGLE_CHECK_NE(&from, this);
  const PersonInfo *source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const PersonInfo *>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PersonInfo::MergeFrom(const PersonInfo &from) {
  GOOGLE_CHECK_NE(&from, this);
  event_result_.MergeFrom(from.event_result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_face_info()) {
      mutable_face_info()->::DMSOutputProtocol::FaceInfo::MergeFrom(
          from.face_info());
    }
    if (from.has_face_feature()) {
      set_face_feature(from.face_feature());
    }
    if (from.has_eye_result()) {
      mutable_eye_result()->::DMSOutputProtocol::EyeResult::MergeFrom(
          from.eye_result());
    }
    if (from.has_smoke_result()) {
      mutable_smoke_result()->::DMSOutputProtocol::SmokeResult::MergeFrom(
          from.smoke_result());
    }
    if (from.has_state_trigger()) {
      mutable_state_trigger()->::DMSOutputProtocol::StateTrigger::MergeFrom(
          from.state_trigger());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PersonInfo::CopyFrom(const ::google::protobuf::Message &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void PersonInfo::CopyFrom(const PersonInfo &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool PersonInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001)
    return false;

  if (has_face_info()) {
    if (!this->face_info().IsInitialized())
      return false;
  }
  if (has_eye_result()) {
    if (!this->eye_result().IsInitialized())
      return false;
  }
  if (has_smoke_result()) {
    if (!this->smoke_result().IsInitialized())
      return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->event_result()))
    return false;
  if (has_state_trigger()) {
    if (!this->state_trigger().IsInitialized())
      return false;
  }
  return true;
}

void PersonInfo::Swap(PersonInfo *other) {
  if (other != this) {
    std::swap(face_info_, other->face_info_);
    std::swap(face_feature_, other->face_feature_);
    std::swap(eye_result_, other->eye_result_);
    std::swap(smoke_result_, other->smoke_result_);
    event_result_.Swap(&other->event_result_);
    std::swap(state_trigger_, other->state_trigger_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PersonInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PersonInfo_descriptor_;
  metadata.reflection = PersonInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VisionPercept::kCameraTypeFieldNumber;
const int VisionPercept::kFrameIdFieldNumber;
const int VisionPercept::kTimeStampFieldNumber;
const int VisionPercept::kPersonFieldNumber;
const int VisionPercept::kDaaResultFieldNumber;
#endif  // !_MSC_VER

VisionPercept::VisionPercept() : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSOutputProtocol.VisionPercept)
}

void VisionPercept::InitAsDefaultInstance() {
  daa_result_ = const_cast< ::DMSOutputProtocol::DAAResult *>(
      &::DMSOutputProtocol::DAAResult::default_instance());
}

VisionPercept::VisionPercept(const VisionPercept &from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSOutputProtocol.VisionPercept)
}

void VisionPercept::SharedCtor() {
  _cached_size_ = 0;
  camera_type_ = 0;
  frame_id_ = 0;
  time_stamp_ = GOOGLE_LONGLONG(0);
  daa_result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisionPercept::~VisionPercept() {
  // @@protoc_insertion_point(destructor:DMSOutputProtocol.VisionPercept)
  SharedDtor();
}

void VisionPercept::SharedDtor() {
  if (this != default_instance_) {
    delete daa_result_;
  }
}

void VisionPercept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor *VisionPercept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisionPercept_descriptor_;
}

const VisionPercept &VisionPercept::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_DMSSDKOutput_2eproto();
  return *default_instance_;
}

VisionPercept *VisionPercept::default_instance_ = NULL;

VisionPercept *VisionPercept::New() const { return new VisionPercept; }

void VisionPercept::Clear() {
#define OFFSET_OF_FIELD_(f)                                              \
  (reinterpret_cast<char *>(&reinterpret_cast<VisionPercept *>(16)->f) - \
   reinterpret_cast<char *>(16))

#define ZR_(first, last)                                  \
  do {                                                    \
    size_t f = OFFSET_OF_FIELD_(first);                   \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last); \
    ::memset(&first, 0, n);                               \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(camera_type_, time_stamp_);
    if (has_daa_result()) {
      if (daa_result_ != NULL)
        daa_result_->::DMSOutputProtocol::DAAResult::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  person_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VisionPercept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION))    \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSOutputProtocol.VisionPercept)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DMSOutputProtocol.CameraType camera_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
              input, &value)));
          if (::DMSOutputProtocol::CameraType_IsValid(value)) {
            set_camera_type(
                static_cast< ::DMSOutputProtocol::CameraType>(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16))
          goto parse_frame_id;
        break;
      }

      // required int32 frame_id = 2;
      case 2: {
        if (tag == 16) {
        parse_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int32,
               ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input, &frame_id_)));
          set_has_frame_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24))
          goto parse_time_stamp;
        break;
      }

      // required sint64 time_stamp = 3;
      case 3: {
        if (tag == 24) {
        parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
               ::google::protobuf::int64,
               ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
              input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42))
          goto parse_person;
        break;
      }

      // repeated .DMSOutputProtocol.PersonInfo person = 5;
      case 5: {
        if (tag == 42) {
        parse_person:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, add_person()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42))
          goto parse_person;
        if (input->ExpectTag(50))
          goto parse_daa_result;
        break;
      }

      // required .DMSOutputProtocol.DAAResult daa_result = 6;
      case 6: {
        if (tag == 50) {
        parse_daa_result:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, mutable_daa_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSOutputProtocol.VisionPercept)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSOutputProtocol.VisionPercept)
  return false;
#undef DO_
}

void VisionPercept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:DMSOutputProtocol.VisionPercept)
  // required .DMSOutputProtocol.CameraType camera_type = 1;
  if (has_camera_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
        1, this->camera_type(), output);
  }

  // required int32 frame_id = 2;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        2, this->frame_id(), output);
  }

  // required sint64 time_stamp = 3;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
        3, this->time_stamp(), output);
  }

  // repeated .DMSOutputProtocol.PersonInfo person = 5;
  for (int i = 0; i < this->person_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, this->person(i), output);
  }

  // required .DMSOutputProtocol.DAAResult daa_result = 6;
  if (has_daa_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, this->daa_result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSOutputProtocol.VisionPercept)
}

::google::protobuf::uint8 *VisionPercept::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSOutputProtocol.VisionPercept)
  // required .DMSOutputProtocol.CameraType camera_type = 1;
  if (has_camera_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        1, this->camera_type(), target);
  }

  // required int32 frame_id = 2;
  if (has_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        2, this->frame_id(), target);
  }

  // required sint64 time_stamp = 3;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(
        3, this->time_stamp(), target);
  }

  // repeated .DMSOutputProtocol.PersonInfo person = 5;
  for (int i = 0; i < this->person_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(5, this->person(i), target);
  }

  // required .DMSOutputProtocol.DAAResult daa_result = 6;
  if (has_daa_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(6, this->daa_result(), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSOutputProtocol.VisionPercept)
  return target;
}

int VisionPercept::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DMSOutputProtocol.CameraType camera_type = 1;
    if (has_camera_type()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                            this->camera_type());
    }

    // required int32 frame_id = 2;
    if (has_frame_id()) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                            this->frame_id());
    }

    // required sint64 time_stamp = 3;
    if (has_time_stamp()) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::SInt64Size(
                  this->time_stamp());
    }

    // required .DMSOutputProtocol.DAAResult daa_result = 6;
    if (has_daa_result()) {
      total_size +=
          1 +
          ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
              this->daa_result());
    }
  }
  // repeated .DMSOutputProtocol.PersonInfo person = 5;
  total_size += 1 * this->person_size();
  for (int i = 0; i < this->person_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->person(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisionPercept::MergeFrom(const ::google::protobuf::Message &from) {
  GOOGLE_CHECK_NE(&from, this);
  const VisionPercept *source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const VisionPercept *>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VisionPercept::MergeFrom(const VisionPercept &from) {
  GOOGLE_CHECK_NE(&from, this);
  person_.MergeFrom(from.person_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camera_type()) {
      set_camera_type(from.camera_type());
    }
    if (from.has_frame_id()) {
      set_frame_id(from.frame_id());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_daa_result()) {
      mutable_daa_result()->::DMSOutputProtocol::DAAResult::MergeFrom(
          from.daa_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VisionPercept::CopyFrom(const ::google::protobuf::Message &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void VisionPercept::CopyFrom(const VisionPercept &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool VisionPercept::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017)
    return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->person()))
    return false;
  if (has_daa_result()) {
    if (!this->daa_result().IsInitialized())
      return false;
  }
  return true;
}

void VisionPercept::Swap(VisionPercept *other) {
  if (other != this) {
    std::swap(camera_type_, other->camera_type_);
    std::swap(frame_id_, other->frame_id_);
    std::swap(time_stamp_, other->time_stamp_);
    person_.Swap(&other->person_);
    std::swap(daa_result_, other->daa_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VisionPercept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisionPercept_descriptor_;
  metadata.reflection = VisionPercept_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PerceptResult::kVisionFieldNumber;
#endif  // !_MSC_VER

PerceptResult::PerceptResult() : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DMSOutputProtocol.PerceptResult)
}

void PerceptResult::InitAsDefaultInstance() {}

PerceptResult::PerceptResult(const PerceptResult &from)
    : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DMSOutputProtocol.PerceptResult)
}

void PerceptResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PerceptResult::~PerceptResult() {
  // @@protoc_insertion_point(destructor:DMSOutputProtocol.PerceptResult)
  SharedDtor();
}

void PerceptResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PerceptResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor *PerceptResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PerceptResult_descriptor_;
}

const PerceptResult &PerceptResult::default_instance() {
  if (default_instance_ == NULL)
    protobuf_AddDesc_DMSSDKOutput_2eproto();
  return *default_instance_;
}

PerceptResult *PerceptResult::default_instance_ = NULL;

PerceptResult *PerceptResult::New() const { return new PerceptResult; }

void PerceptResult::Clear() {
  vision_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PerceptResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION) \
  if (!(EXPRESSION))    \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DMSOutputProtocol.PerceptResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DMSOutputProtocol.VisionPercept vision = 1;
      case 1: {
        if (tag == 10) {
        parse_vision:
          DO_(::google::protobuf::internal::WireFormatLite::
                  ReadMessageNoVirtual(input, add_vision()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10))
          goto parse_vision;
        if (input->ExpectAtEnd())
          goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                ::google::protobuf::internal::WireFormatLite::
                    WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
            input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DMSOutputProtocol.PerceptResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DMSOutputProtocol.PerceptResult)
  return false;
#undef DO_
}

void PerceptResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:DMSOutputProtocol.PerceptResult)
  // repeated .DMSOutputProtocol.VisionPercept vision = 1;
  for (int i = 0; i < this->vision_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->vision(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DMSOutputProtocol.PerceptResult)
}

::google::protobuf::uint8 *PerceptResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8 *target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DMSOutputProtocol.PerceptResult)
  // repeated .DMSOutputProtocol.VisionPercept vision = 1;
  for (int i = 0; i < this->vision_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteMessageNoVirtualToArray(1, this->vision(i), target);
  }

  if (!unknown_fields().empty()) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DMSOutputProtocol.PerceptResult)
  return target;
}

int PerceptResult::ByteSize() const {
  int total_size = 0;

  // repeated .DMSOutputProtocol.VisionPercept vision = 1;
  total_size += 1 * this->vision_size();
  for (int i = 0; i < this->vision_size(); i++) {
    total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
            this->vision(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerceptResult::MergeFrom(const ::google::protobuf::Message &from) {
  GOOGLE_CHECK_NE(&from, this);
  const PerceptResult *source =
      ::google::protobuf::internal::dynamic_cast_if_available<
          const PerceptResult *>(&from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PerceptResult::MergeFrom(const PerceptResult &from) {
  GOOGLE_CHECK_NE(&from, this);
  vision_.MergeFrom(from.vision_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PerceptResult::CopyFrom(const ::google::protobuf::Message &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void PerceptResult::CopyFrom(const PerceptResult &from) {
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool PerceptResult::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->vision()))
    return false;
  return true;
}

void PerceptResult::Swap(PerceptResult *other) {
  if (other != this) {
    vision_.Swap(&other->vision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PerceptResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PerceptResult_descriptor_;
  metadata.reflection = PerceptResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DMSOutputProtocol

// @@protoc_insertion_point(global_scope)
